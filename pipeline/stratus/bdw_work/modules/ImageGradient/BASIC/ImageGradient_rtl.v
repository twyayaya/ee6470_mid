// Generated by stratus_hls 19.12-s100  (91710.131054)
// Sun May  2 00:39:20 2021
// from ../ImageGradient.cpp

`timescale 1ps / 1ps

      
module ImageGradient(i_clk, i_rst, i_grey_busy, i_grey_vld, i_grey_data, o_result_busy, o_result_vld, o_result_data);

      input i_clk;
      input i_rst;
      input i_grey_vld;
      input [23:0] i_grey_data;
      input o_result_busy;
      output i_grey_busy;
      output o_result_vld;
      output [23:0] o_result_data;
      reg [23:0] o_result_data;
      reg o_result_m_req_m_prev_trig_req;
      reg o_result_m_unacked_req;
      wire ImageGradient_Xor_1Ux1U_1U_1_1_out1;
      wire ImageGradient_Or_1Ux1U_1U_4_2_out1;
      reg ImageGradient_N_Muxb_1_2_0_4_4_out1;
      reg i_grey_m_unvalidated_req;
      wire ImageGradient_gen_busy_r_4_23_gnew_req;
      wire ImageGradient_gen_busy_r_4_23_gdiv;
      wire ImageGradient_gen_busy_r_4_23_gen_busy_i_grey_m_data_is_invalid_next;
      reg[3:0] global_state_next;
      reg[7:0] ImageGradient_Add_8Ux8U_8U_4_18_in2;
      reg gs_ctrl4;
      reg[7:0] ImageGradient_Add_8Ux8U_8U_4_11_in1;
      reg[1:0] gs_ctrl3;
      wire[7:0] ImageGradient_Mul_8Ux8U_8U_4_10_out1;
      reg[7:0] ImageGradient_Mul_8Ux8U_8U_4_10_in1;
      reg gs_ctrl2;
      wire[3:0] ImageGradient_Add_4Ux2U_4U_4_8_out1;
      reg[1:0] ImageGradient_Mul_2Ux2U_4U_4_6_in2;
      reg gs_ctrl0;
      reg[7:0] s_reg_26;
      reg[7:0] s_reg_25;
      wire[1:0] ImageGradient_Add_2Ux1U_2U_4_9_out1;
      reg[1:0] s_reg_24;
      reg[7:0] s_reg_22;
      wire[7:0] ImageGradient_Add_8Ux8U_8U_4_11_out1;
      reg[7:0] s_reg_21;
      wire[1:0] ImageGradient_Add_2Ux1U_2U_4_7_out1;
      reg[1:0] s_reg_20;
      wire[3:0] ImageGradient_Mul_2Ux2U_4U_4_6_out1;
      reg[3:0] s_reg_19;
      wire ImageGradient_And_1Ux1U_1U_4_21_out1;
      wire[2:0] ImageGradient_gen_busy_r_4_23_out1;
      wire ImageGradient_Not_1U_1U_1_3_out1;
      reg o_result_m_req_m_trig_req;
      wire ImageGradient_LessThan_2Ux2U_1U_4_17_out1;
      wire ImageGradient_LessThan_2Ux2U_1U_4_16_out1;
      reg[3:0] global_state;
      reg i_grey_m_busy_req_0;
      wire[7:0] ImageGradient_Add_8Ux8U_8U_4_20_out1;
      wire[7:0] ImageGradient_Add_8Ux8U_8U_4_18_out1;
      reg[7:0] s_reg_23;
      reg stall0;
      wire[3:0] filter2_in1;
      wire[31:0] filter2_out1;

         ImageGradient_ROM_9X32_filter2 filter2(
                                          .in1( filter2_in1 ),
                                          .out1( filter2_out1 ),
                                          .clk( i_clk )
                                        );

         // resource: regr_en_24
         always @(posedge i_clk)
          begin :drive_o_result_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  o_result_data <= {ImageGradient_Add_8Ux8U_8U_4_20_out1, {ImageGradient_Add_8Ux8U_8U_4_18_out1, s_reg_23}};
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge i_clk)
          begin :drive_i_grey_m_busy_req_0
            if (i_rst == 1'b0) begin
               i_grey_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        4'd00, 4'd08:                         begin
                           i_grey_m_busy_req_0 <= 1'd0;
                        end
                        
                        4'd01:                         begin
                           i_grey_m_busy_req_0 <= 1'd1;
                        end
                        
                        4'd05:                         begin
                           if (ImageGradient_LessThan_2Ux2U_1U_4_16_out1) begin
                              i_grey_m_busy_req_0 <= 1'd0;
                           end
                           else begin
                              if (ImageGradient_LessThan_2Ux2U_1U_4_17_out1) begin
                                 i_grey_m_busy_req_0 <= 1'd0;
                              end
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_result_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        4'd07:                         begin
                           o_result_m_req_m_trig_req <= ImageGradient_Not_1U_1U_1_3_out1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx3i1c
         always @(ImageGradient_And_1Ux1U_1U_4_21_out1 or ImageGradient_gen_busy_r_4_23_out1[0] or global_state)
          begin :drive_stall0
            case (global_state) 

               4'd01:                begin
                  stall0 = ImageGradient_gen_busy_r_4_23_out1[0];
               end
               
               4'd08:                begin
                  stall0 = ImageGradient_And_1Ux1U_1U_4_21_out1;
               end
               
               default:                begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_19
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd00, 4'd08:                      begin
                        s_reg_19 <= ImageGradient_Mul_2Ux2U_4U_4_6_out1;
                     end
                     
                     4'd05:                      begin
                        if (ImageGradient_LessThan_2Ux2U_1U_4_16_out1) begin
                        end
                        else begin
                           s_reg_19 <= ImageGradient_Mul_2Ux2U_4U_4_6_out1;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_20
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd00, 4'd08:                      begin
                        s_reg_20 <= ImageGradient_Add_2Ux1U_2U_4_7_out1;
                     end
                     
                     4'd05:                      begin
                        if (ImageGradient_LessThan_2Ux2U_1U_4_16_out1) begin
                        end
                        else begin
                           s_reg_20 <= ImageGradient_Add_2Ux1U_2U_4_7_out1;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_8bx2i1c
         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_21
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd00, 4'd08:                      begin
                        s_reg_21 <= 8'd000;
                     end
                     
                     4'd04:                      begin
                        s_reg_21 <= ImageGradient_Add_8Ux8U_8U_4_11_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_8bx2i1c
         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_22
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd00, 4'd08:                      begin
                        s_reg_22 <= 8'd000;
                     end
                     
                     4'd03:                      begin
                        s_reg_22 <= ImageGradient_Add_8Ux8U_8U_4_11_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_8bx3i1c
         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_23
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd00, 4'd08:                      begin
                        s_reg_23 <= 8'd000;
                     end
                     
                     4'd02:                      begin
                        s_reg_23 <= ImageGradient_Add_8Ux8U_8U_4_11_out1;
                     end
                     
                     4'd06:                      begin
                        s_reg_23 <= ImageGradient_Add_8Ux8U_8U_4_18_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx2i1c
         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_24
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd00, 4'd08:                      begin
                        s_reg_24 <= 2'd0;
                     end
                     
                     4'd01:                      begin
                        s_reg_24 <= ImageGradient_Add_2Ux1U_2U_4_9_out1;
                     end
                     
                     4'd05:                      begin
                        if (ImageGradient_LessThan_2Ux2U_1U_4_16_out1) begin
                        end
                        else begin
                           s_reg_24 <= 2'd0;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_25
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd01:                      begin
                        s_reg_25 <= i_grey_data[7:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_26
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd02:                      begin
                        s_reg_26 <= filter2_out1[7:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx2i1c
         always @(s_reg_20 or gs_ctrl0)
          begin :drive_ImageGradient_Mul_2Ux2U_4U_4_6_in2
            if (gs_ctrl0) begin
               ImageGradient_Mul_2Ux2U_4U_4_6_in2 = s_reg_20;
            end
            else begin
               ImageGradient_Mul_2Ux2U_4U_4_6_in2 = 2'd0;
            end
         end

         // resource: ImageGradient_Mul_2Ux2U_4U_4  instance: ImageGradient_Mul_2Ux2U_4U_4_6
         assign ImageGradient_Mul_2Ux2U_4U_4_6_out1 = {2'b00, ImageGradient_Mul_2Ux2U_4U_4_6_in2}*4'd03;

         // resource: ImageGradient_Add_2Ux1U_2U_4  instance: ImageGradient_Add_2Ux1U_2U_4_7
         assign ImageGradient_Add_2Ux1U_2U_4_7_out1 = ImageGradient_Mul_2Ux2U_4U_4_6_in2 + 2'd1;

         // resource: ImageGradient_Add_4Ux2U_4U_4  instance: ImageGradient_Add_4Ux2U_4U_4_8
         assign ImageGradient_Add_4Ux2U_4U_4_8_out1 = s_reg_19 + {2'b00, s_reg_24};

         // resource: ImageGradient_Add_2Ux1U_2U_4  instance: ImageGradient_Add_2Ux1U_2U_4_9
         assign ImageGradient_Add_2Ux1U_2U_4_9_out1 = s_reg_24 + 2'd1;

         // instance: drive_filter2_in1
         assign filter2_in1 = ImageGradient_Add_4Ux2U_4U_4_8_out1;

         // resource: mux_8bx2i0c
         always @(s_reg_26 or filter2_out1[7:0] or gs_ctrl2)
          begin :drive_ImageGradient_Mul_8Ux8U_8U_4_10_in1
            if (gs_ctrl2) begin
               ImageGradient_Mul_8Ux8U_8U_4_10_in1 = s_reg_26;
            end
            else begin
               ImageGradient_Mul_8Ux8U_8U_4_10_in1 = filter2_out1[7:0];
            end
         end

         // resource: ImageGradient_Mul_8Ux8U_8U_4  instance: ImageGradient_Mul_8Ux8U_8U_4_10
         assign ImageGradient_Mul_8Ux8U_8U_4_10_out1 = s_reg_25*ImageGradient_Mul_8Ux8U_8U_4_10_in1;

         // resource: mux_8bx3i0c
         always @(s_reg_21 or s_reg_22 or s_reg_23 or gs_ctrl3)
          begin :drive_ImageGradient_Add_8Ux8U_8U_4_11_in1
            case (gs_ctrl3) 

               2'd1:                begin
                  ImageGradient_Add_8Ux8U_8U_4_11_in1 = s_reg_22;
               end
               
               2'd2:                begin
                  ImageGradient_Add_8Ux8U_8U_4_11_in1 = s_reg_21;
               end
               
               default:                begin
                  ImageGradient_Add_8Ux8U_8U_4_11_in1 = s_reg_23;
               end
               
            endcase

         end

         // resource: ImageGradient_Add_8Ux8U_8U_4  instance: ImageGradient_Add_8Ux8U_8U_4_11
         assign ImageGradient_Add_8Ux8U_8U_4_11_out1 = ImageGradient_Mul_8Ux8U_8U_4_10_out1 + ImageGradient_Add_8Ux8U_8U_4_11_in1;

         // resource: ImageGradient_LessThan_2Ux2U_1U_4  instance: ImageGradient_LessThan_2Ux2U_1U_4_16
         assign ImageGradient_LessThan_2Ux2U_1U_4_16_out1 = s_reg_24 < 2'd3;

         // resource: ImageGradient_LessThan_2Ux2U_1U_4  instance: ImageGradient_LessThan_2Ux2U_1U_4_17
         assign ImageGradient_LessThan_2Ux2U_1U_4_17_out1 = s_reg_20 < 2'd3;

         // resource: mux_8bx2i0c
         always @(s_reg_22 or s_reg_23 or gs_ctrl4)
          begin :drive_ImageGradient_Add_8Ux8U_8U_4_18_in2
            if (gs_ctrl4) begin
               ImageGradient_Add_8Ux8U_8U_4_18_in2 = s_reg_22;
            end
            else begin
               ImageGradient_Add_8Ux8U_8U_4_18_in2 = s_reg_23;
            end
         end

         // resource: ImageGradient_Add_8Ux8U_8U_4  instance: ImageGradient_Add_8Ux8U_8U_4_18
         assign ImageGradient_Add_8Ux8U_8U_4_18_out1 = ImageGradient_Add_8Ux8U_8U_4_18_in2 + 8'd128;

         // resource: ImageGradient_Add_8Ux8U_8U_4  instance: ImageGradient_Add_8Ux8U_8U_4_20
         assign ImageGradient_Add_8Ux8U_8U_4_20_out1 = s_reg_21 + 8'd128;

         // resource: regr_en_sc_4
         always @(posedge i_clk)
          begin :drive_global_state
            if (i_rst == 1'b0) begin
               global_state <= 4'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     global_state <= global_state_next;
                  end
                  
               endcase

            end
         end

         // resource: mux_4bx2i1c
         always @(ImageGradient_LessThan_2Ux2U_1U_4_16_out1 or ImageGradient_LessThan_2Ux2U_1U_4_17_out1 or global_state)
          begin :drive_global_state_next
            case (global_state) 

               4'd00, 4'd08:                begin
                  global_state_next = 4'd01;
               end
               
               4'd05:                begin
                  if (ImageGradient_LessThan_2Ux2U_1U_4_16_out1) begin
                     global_state_next = 4'd01;
                  end
                  else begin
                     if (ImageGradient_LessThan_2Ux2U_1U_4_17_out1) begin
                        global_state_next = 4'd01;
                     end
                     else begin
                        global_state_next = global_state + 4'd01;
                     end
                  end
               end
               
               default:                begin
                  global_state_next = global_state + 4'd01;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl0
            if (i_rst == 1'b0) begin
               gs_ctrl0 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        4'd05:                         begin
                           gs_ctrl0 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl0 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl2
            if (i_rst == 1'b0) begin
               gs_ctrl2 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        4'd03, 4'd04:                         begin
                           gs_ctrl2 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl2 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl3
            if (i_rst == 1'b0) begin
               gs_ctrl3 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        4'd03:                         begin
                           gs_ctrl3 <= 2'd1;
                        end
                        
                        4'd04:                         begin
                           gs_ctrl3 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl3 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl4
            if (i_rst == 1'b0) begin
               gs_ctrl4 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        4'd07:                         begin
                           gs_ctrl4 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl4 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // instance: drive_i_grey_busy
         assign i_grey_busy = ImageGradient_gen_busy_r_4_23_out1[2];

         // resource: ImageGradient_gen_busy_r_4  instance: ImageGradient_gen_busy_r_4_23
         assign ImageGradient_gen_busy_r_4_23_out1 = {ImageGradient_gen_busy_r_4_23_gnew_req, {ImageGradient_gen_busy_r_4_23_gdiv, ImageGradient_gen_busy_r_4_23_gen_busy_i_grey_m_data_is_invalid_next}};

         // resource: ImageGradient_gen_busy_r_4  instance: ImageGradient_gen_busy_r_4_23
         assign ImageGradient_gen_busy_r_4_23_gen_busy_i_grey_m_data_is_invalid_next = ~ImageGradient_gen_busy_r_4_23_gdiv;

         // resource: ImageGradient_gen_busy_r_4  instance: ImageGradient_gen_busy_r_4_23
         assign ImageGradient_gen_busy_r_4_23_gdiv = i_grey_vld & !ImageGradient_gen_busy_r_4_23_gnew_req;

         // resource: ImageGradient_gen_busy_r_4  instance: ImageGradient_gen_busy_r_4_23
         assign ImageGradient_gen_busy_r_4_23_gnew_req = i_grey_m_busy_req_0 & (i_grey_m_unvalidated_req | i_grey_vld);

         // resource: regr_ss_1
         always @(posedge i_clk)
          begin :drive_i_grey_m_unvalidated_req
            if (i_rst == 1'b0) begin
               i_grey_m_unvalidated_req <= 1'd1;
            end
            else begin
               i_grey_m_unvalidated_req <= ImageGradient_N_Muxb_1_2_0_4_4_out1;
            end
         end

         // resource: ImageGradient_N_Muxb_1_2_0_4
         always @(i_grey_vld or i_grey_m_busy_req_0 or i_grey_m_unvalidated_req)
          begin :ImageGradient_N_Muxb_1_2_0_4_4
            if (i_grey_m_busy_req_0) begin
               ImageGradient_N_Muxb_1_2_0_4_4_out1 = i_grey_m_unvalidated_req;
            end
            else begin
               ImageGradient_N_Muxb_1_2_0_4_4_out1 = i_grey_vld;
            end
         end

         // instance: drive_o_result_vld
         assign o_result_vld = ImageGradient_Or_1Ux1U_1U_4_2_out1;

         // resource: ImageGradient_Or_1Ux1U_1U_4  instance: ImageGradient_Or_1Ux1U_1U_4_2
         assign ImageGradient_Or_1Ux1U_1U_4_2_out1 = o_result_m_unacked_req | ImageGradient_Xor_1Ux1U_1U_1_1_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_unacked_req
            if (i_rst == 1'b0) begin
               o_result_m_unacked_req <= 1'd0;
            end
            else begin
               o_result_m_unacked_req <= ImageGradient_And_1Ux1U_1U_4_21_out1;
            end
         end

         // resource: ImageGradient_And_1Ux1U_1U_4  instance: ImageGradient_And_1Ux1U_1U_4_21
         assign ImageGradient_And_1Ux1U_1U_4_21_out1 = o_result_busy & o_result_vld;

         // resource: ImageGradient_Xor_1Ux1U_1U_1  instance: ImageGradient_Xor_1Ux1U_1U_1_1
         assign ImageGradient_Xor_1Ux1U_1U_1_1_out1 = o_result_m_req_m_trig_req ^ o_result_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_result_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_result_m_req_m_prev_trig_req <= o_result_m_req_m_trig_req;
            end
         end

         // resource: ImageGradient_Not_1U_1U_1  instance: ImageGradient_Not_1U_1U_1_3
         assign ImageGradient_Not_1U_1U_1_3_out1 = !o_result_m_req_m_trig_req;


endmodule

