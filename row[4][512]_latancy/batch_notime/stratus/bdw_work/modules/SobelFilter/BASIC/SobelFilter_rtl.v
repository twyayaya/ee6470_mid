// Generated by stratus_hls 19.12-s100  (91710.131054)
// Thu May  6 00:44:12 2021
// from ../SobelFilter.cpp

`timescale 1ps / 1ps

      
module SobelFilter(i_clk, i_rst, i_rgb_busy, i_rgb_vld, i_rgb_data, o_result_r_busy, o_result_r_vld, o_result_r_data, o_result_g_busy, o_result_g_vld, o_result_g_data, o_result_b_busy, o_result_b_vld, o_result_b_data);

      input i_clk;
      input i_rst;
      input i_rgb_vld;
      input [23:0] i_rgb_data;
      input o_result_r_busy;
      input o_result_g_busy;
      input o_result_b_busy;
      output i_rgb_busy;
      output o_result_r_vld;
      output [7:0] o_result_r_data;
      reg [7:0] o_result_r_data;
      output o_result_g_vld;
      output [7:0] o_result_g_data;
      reg [7:0] o_result_g_data;
      output o_result_b_vld;
      output [7:0] o_result_b_data;
      reg [7:0] o_result_b_data;
      reg o_result_b_m_req_m_prev_trig_req;
      reg o_result_b_m_unacked_req;
      wire SobelFilter_Xor_1Ux1U_1U_1_7_out1;
      wire SobelFilter_Or_1Ux1U_1U_4_8_out1;
      reg o_result_g_m_req_m_prev_trig_req;
      reg o_result_g_m_unacked_req;
      wire SobelFilter_Xor_1Ux1U_1U_1_4_out1;
      wire SobelFilter_Or_1Ux1U_1U_4_5_out1;
      reg o_result_r_m_req_m_prev_trig_req;
      reg o_result_r_m_unacked_req;
      wire SobelFilter_Xor_1Ux1U_1U_1_1_out1;
      wire SobelFilter_Or_1Ux1U_1U_4_2_out1;
      reg SobelFilter_N_Muxb_1_2_3_4_10_out1;
      reg i_rgb_m_unvalidated_req;
      wire SobelFilter_gen_busy_r_4_86_gnew_req;
      wire SobelFilter_gen_busy_r_4_86_gdiv;
      wire SobelFilter_gen_busy_r_4_86_gen_busy_i_rgb_m_data_is_invalid_next;
      reg[4:0] global_state_next;
      reg[8:0] SobelFilter_Add_10Ux9U_11U_4_62_in1;
      reg gs_ctrl21;
      wire[7:0] SobelFilter_Mul_8Ux8U_8U_4_48_out1;
      wire[7:0] SobelFilter_Div_16Ux7U_8U_1_44_out1;
      wire[15:0] SobelFilter_Div_16Ux7U_8U_1_44_in2;
      /*signed*/wire[19:0] SobelFilter_Add_20Sx16U_20S_1_39_out1;
      /*signed*/wire[19:0] SobelFilter_Add_20Sx16U_20S_1_39_in2;
      /*signed*/wire[19:0] SobelFilter_Add_20Sx17U_20S_4_36_out1;
      /*signed*/wire[19:0] SobelFilter_Add_20Sx17U_20S_4_36_in2;
      wire[16:0] SobelFilter_Mul_9Ux8U_17U_4_46_out1;
      /*signed*/wire[18:0] SobelFilter_Mul_11Sx8U_19S_4_34_out1;
      wire[16:0] SobelFilter_Mul_9Ux8U_17U_4_33_out1;
      /*signed*/wire[4:0] SobelFilter_Add_5Sx2U_5S_4_31_out1;
      wire[3:0] SobelFilter_Mul_2Ux2U_4U_4_30_out1;
      reg[1:0] SobelFilter_Mul_2Ux2U_4U_4_30_in2;
      /*signed*/reg[1:0] SobelFilter_Add_12Sx10U_12S_4_29_in2_slice;
      wire[9:0] SobelFilter_Add_9Ux2U_10U_4_25_out1;
      reg[1:0] SobelFilter_Add_9Ux2U_10U_4_25_in1;
      reg[8:0] SobelFilter_Add_9Ux2U_10U_4_25_in2;
      reg[1:0] gs_ctrl15;
      reg[1:0] SobelFilter_Add_2Ux1U_2U_4_22_in2;
      reg gs_ctrl14;
      reg[8:0] SobelFilter_Add_12Sx10U_12S_4_16_in1_slice;
      reg gs_ctrl13;
      reg[2:0] gs_ctrl9;
      reg[3:0] gs_ctrl5;
      reg gs_ctrl4;
      reg[2:0] gs_ctrl3;
      reg[1:0] gs_ctrl2;
      /*signed*/wire[11:0] SobelFilter_Add_12Sx10U_12S_4_29_out1;
      reg[3:0] gs_ctrl1;
      reg[8:0] SobelFilter_Add_9Ux3S_11S_4_13_in2;
      reg gs_ctrl0;
      wire[10:0] SobelFilter_Add_10Ux9U_11U_4_62_out1;
      reg[10:0] s_reg_43;
      /*signed*/wire[11:0] SobelFilter_Add_12Sx10U_12S_4_67_out1;
      /*signed*/wire[11:0] SobelFilter_Add_12Sx10U_12S_4_16_out1;
      reg[10:0] s_reg_42;
      wire[1:0] SobelFilter_Add_2Ux1U_2U_4_26_out1;
      reg[1:0] s_reg_41;
      wire[1:0] SobelFilter_Add_2Ux1U_2U_4_22_out1;
      reg[1:0] s_reg_40;
      wire SobelFilter_LessThan_11Sx11S_1U_4_14_out1;
      /*signed*/wire[10:0] SobelFilter_Add_9Ux3S_11S_4_13_out1;
      reg[10:0] s_reg_38;
      wire SobelFilter_And_1Ux1U_1U_4_82_out1;
      wire SobelFilter_And_1Ux1U_1U_4_83_out1;
      wire SobelFilter_And_1Ux1U_1U_4_84_out1;
      wire[2:0] SobelFilter_gen_busy_r_4_86_out1;
      wire SobelFilter_Not_1U_1U_1_9_out1;
      reg o_result_b_m_req_m_trig_req;
      wire SobelFilter_Not_1U_1U_1_6_out1;
      reg o_result_g_m_req_m_trig_req;
      wire SobelFilter_Not_1U_1U_1_3_out1;
      reg o_result_r_m_req_m_trig_req;
      reg i_rgb_m_busy_req_0;
      wire[7:0] SobelFilter_Add_8Ux8U_8U_1_58_out1;
      wire SobelFilter_LessThan_2Ux2U_1U_4_57_out1;
      wire[7:0] SobelFilter_Add_8Ux8U_8U_1_51_out1;
      wire SobelFilter_LessThan_2Ux2U_1U_4_32_out1;
      wire SobelFilter_LessThan_4Sx3S_1U_4_15_out1;
      reg[1:0] s_reg_39;
      wire[7:0] SobelFilter_Add_8Ux8U_8U_4_59_out1;
      wire[7:0] SobelFilter_Add_8Ux8U_8U_1_54_out1;
      wire[7:0] SobelFilter_Add_8Ux8U_8U_4_60_out1;
      wire[7:0] SobelFilter_Add_8Ux8U_8U_1_56_out1;
      wire SobelFilter_LessThan_11Sx11S_1U_4_20_out1;
      /*signed*/wire[3:0] SobelFilter_Add_3Sx2U_4S_4_12_out1;
      reg[4:0] global_state;
      reg stall0;
      wire[3:0] filter2_in1;
      wire[31:0] filter2_out1;
      reg[7:0] from_tb_b_DIN;
      reg from_tb_b_CE;
      reg from_tb_b_RW;
      reg[10:0] from_tb_b_in1;
      wire[7:0] from_tb_b_out1;
      reg[7:0] from_tb_g_DIN;
      reg from_tb_g_CE;
      reg from_tb_g_RW;
      reg[10:0] from_tb_g_in1;
      wire[7:0] from_tb_g_out1;
      reg[7:0] from_tb_r_DIN;
      reg from_tb_r_CE;
      reg from_tb_r_RW;
      reg[10:0] from_tb_r_in1;
      wire[7:0] from_tb_r_out1;

         SobelFilter_RAM_2048X8_1 from_tb_r(
                                    .DIN( from_tb_r_DIN ),
                                    .CE( from_tb_r_CE ),
                                    .RW( from_tb_r_RW ),
                                    .in1( from_tb_r_in1 ),
                                    .out1( from_tb_r_out1 ),
                                    .clk( i_clk )
                                  );

         SobelFilter_RAM_2048X8_1 from_tb_g(
                                    .DIN( from_tb_g_DIN ),
                                    .CE( from_tb_g_CE ),
                                    .RW( from_tb_g_RW ),
                                    .in1( from_tb_g_in1 ),
                                    .out1( from_tb_g_out1 ),
                                    .clk( i_clk )
                                  );

         SobelFilter_RAM_2048X8_1 from_tb_b(
                                    .DIN( from_tb_b_DIN ),
                                    .CE( from_tb_b_CE ),
                                    .RW( from_tb_b_RW ),
                                    .in1( from_tb_b_in1 ),
                                    .out1( from_tb_b_out1 ),
                                    .clk( i_clk )
                                  );

         SobelFilter_ROM_9X32_filter2 filter2(
                                        .in1( filter2_in1 ),
                                        .out1( filter2_out1 ),
                                        .clk( i_clk )
                                      );

         // resource: mux_8bx4i1c
         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_o_result_b_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd01:                      begin
                        o_result_b_data <= {{ 4 {SobelFilter_Add_3Sx2U_4S_4_12_out1[3]}}, SobelFilter_Add_3Sx2U_4S_4_12_out1};
                     end
                     
                     5'd04:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                        end
                        else begin
                           o_result_b_data <= 8'd000;
                        end
                     end
                     
                     5'd05:                      begin
                        o_result_b_data <= SobelFilter_Add_8Ux8U_8U_1_56_out1;
                     end
                     
                     5'd07:                      begin
                        o_result_b_data <= SobelFilter_Add_8Ux8U_8U_4_60_out1;
                     end
                     
                     5'd09:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                           o_result_b_data <= 8'd000;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_8bx3i1c
         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_o_result_g_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd04, 5'd09:                      begin
                        o_result_g_data <= 8'd000;
                     end
                     
                     5'd05:                      begin
                        o_result_g_data <= SobelFilter_Add_8Ux8U_8U_1_54_out1;
                     end
                     
                     5'd06:                      begin
                        o_result_g_data <= SobelFilter_Add_8Ux8U_8U_4_59_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_8bx5i1c
         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_o_result_r_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd00:                      begin
                        o_result_r_data <= 8'd000;
                     end
                     
                     5'd02:                      begin
                        if (s_reg_39[0]) begin
                           o_result_r_data <= {{ 4 {o_result_r_data[3]}}, o_result_r_data[3:0]};
                        end
                        else begin
                           if (SobelFilter_LessThan_4Sx3S_1U_4_15_out1) begin
                              o_result_r_data <= {{ 4 {o_result_b_data[3]}}, o_result_b_data[3:0]};
                           end
                        end
                     end
                     
                     5'd04:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                        end
                        else begin
                           o_result_r_data <= 8'd000;
                        end
                     end
                     
                     5'd05:                      begin
                        if (SobelFilter_LessThan_2Ux2U_1U_4_32_out1) begin
                           o_result_r_data <= SobelFilter_Add_8Ux8U_8U_1_51_out1;
                        end
                        else begin
                           if (SobelFilter_LessThan_2Ux2U_1U_4_57_out1) begin
                              o_result_r_data <= SobelFilter_Add_8Ux8U_8U_1_51_out1;
                           end
                           else begin
                              o_result_r_data <= SobelFilter_Add_8Ux8U_8U_1_58_out1;
                           end
                        end
                     end
                     
                     5'd09:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                           o_result_r_data <= 8'd000;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_m_busy_req_0
            if (i_rst == 1'b0) begin
               i_rgb_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd00, 5'd02:                         begin
                           i_rgb_m_busy_req_0 <= 1'd0;
                        end
                        
                        5'd01, 5'd03:                         begin
                           i_rgb_m_busy_req_0 <= 1'd1;
                        end
                        
                        5'd04:                         begin
                           if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        5'd16:                         begin
                           if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                           end
                           else begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_r_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_result_r_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd05:                         begin
                           if (!SobelFilter_LessThan_2Ux2U_1U_4_32_out1 && !SobelFilter_LessThan_2Ux2U_1U_4_57_out1) begin
                              o_result_r_m_req_m_trig_req <= SobelFilter_Not_1U_1U_1_3_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_g_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_result_g_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd06:                         begin
                           o_result_g_m_req_m_trig_req <= SobelFilter_Not_1U_1U_1_6_out1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_b_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_result_b_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd07:                         begin
                           o_result_b_m_req_m_trig_req <= SobelFilter_Not_1U_1U_1_9_out1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx5i1c
         always @(SobelFilter_And_1Ux1U_1U_4_82_out1 or SobelFilter_And_1Ux1U_1U_4_83_out1 or SobelFilter_And_1Ux1U_1U_4_84_out1 or SobelFilter_gen_busy_r_4_86_out1[0] or global_state)
          begin :drive_stall0
            case (global_state) 

               5'd01, 5'd03:                begin
                  stall0 = SobelFilter_gen_busy_r_4_86_out1[0];
               end
               
               5'd06:                begin
                  stall0 = SobelFilter_And_1Ux1U_1U_4_82_out1;
               end
               
               5'd07:                begin
                  stall0 = SobelFilter_And_1Ux1U_1U_4_83_out1;
               end
               
               5'd08:                begin
                  stall0 = SobelFilter_And_1Ux1U_1U_4_84_out1;
               end
               
               default:                begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: mux_11bx2i1c
         // resource: regr_en_11
         always @(posedge i_clk)
          begin :drive_s_reg_38
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd00:                      begin
                        s_reg_38 <= 11'd0000;
                     end
                     
                     5'd01, 5'd03, 5'd15:                      begin
                        s_reg_38 <= SobelFilter_Add_9Ux3S_11S_4_13_out1;
                     end
                     
                     5'd02:                      begin
                        if (s_reg_39[0]) begin
                        end
                        else begin
                           s_reg_38 <= 11'd0000;
                        end
                     end
                     
                     5'd04:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                        end
                        else begin
                           s_reg_38 <= SobelFilter_Add_9Ux3S_11S_4_13_out1;
                        end
                     end
                     
                     5'd09:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                           s_reg_38 <= SobelFilter_Add_9Ux3S_11S_4_13_out1;
                        end
                        else begin
                           s_reg_38 <= 11'd0000;
                        end
                     end
                     
                     5'd16:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                        end
                        else begin
                           s_reg_38 <= 11'd0000;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx3i1c
         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_39
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd01:                      begin
                        s_reg_39 <= {1'b0, SobelFilter_LessThan_11Sx11S_1U_4_14_out1};
                     end
                     
                     5'd04, 5'd09:                      begin
                        s_reg_39 <= 2'd0;
                     end
                     
                     5'd05:                      begin
                        if (SobelFilter_LessThan_2Ux2U_1U_4_32_out1) begin
                        end
                        else begin
                           s_reg_39 <= s_reg_40;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_40
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd04, 5'd09:                      begin
                        s_reg_40 <= SobelFilter_Add_2Ux1U_2U_4_22_out1;
                     end
                     
                     5'd05:                      begin
                        if (SobelFilter_LessThan_2Ux2U_1U_4_32_out1) begin
                        end
                        else begin
                           s_reg_40 <= SobelFilter_Add_2Ux1U_2U_4_22_out1;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_41
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd04, 5'd05, 5'd09:                      begin
                        s_reg_41 <= SobelFilter_Add_2Ux1U_2U_4_26_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_11bx4i1c
         // resource: regr_en_11
         always @(posedge i_clk)
          begin :drive_s_reg_42
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd02, 5'd16:                      begin
                        s_reg_42 <= SobelFilter_Add_12Sx10U_12S_4_16_out1[10:0];
                     end
                     
                     5'd04:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                           s_reg_42 <= SobelFilter_Add_12Sx10U_12S_4_16_out1[10:0];
                        end
                        else begin
                           s_reg_42 <= 11'd0000;
                        end
                     end
                     
                     5'd09:                      begin
                        s_reg_42 <= s_reg_38;
                     end
                     
                     5'd10, 5'd12:                      begin
                        s_reg_42 <= SobelFilter_Add_12Sx10U_12S_4_67_out1[10:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_11bx2i0c
         // resource: regr_en_11
         always @(posedge i_clk)
          begin :drive_s_reg_43
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd10:                      begin
                        s_reg_43 <= SobelFilter_Add_10Ux9U_11U_4_62_out1;
                     end
                     
                     5'd12:                      begin
                        s_reg_43 <= SobelFilter_Add_12Sx10U_12S_4_16_out1[10:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: SobelFilter_Add_3Sx2U_4S_4  instance: SobelFilter_Add_3Sx2U_4S_4_12
         assign SobelFilter_Add_3Sx2U_4S_4_12_out1 = {2'b00, o_result_r_data[1:0]} + 4'd01;

         // resource: mux_9bx2i1c
         always @(s_reg_38[8:0] or gs_ctrl0)
          begin :drive_SobelFilter_Add_9Ux3S_11S_4_13_in2
            if (gs_ctrl0) begin
               SobelFilter_Add_9Ux3S_11S_4_13_in2 = 9'd000;
            end
            else begin
               SobelFilter_Add_9Ux3S_11S_4_13_in2 = s_reg_38[8:0];
            end
         end

         // resource: SobelFilter_Add_9Ux3S_11S_4  instance: SobelFilter_Add_9Ux3S_11S_4_13
         assign SobelFilter_Add_9Ux3S_11S_4_13_out1 = {2'b00, SobelFilter_Add_9Ux3S_11S_4_13_in2} + 11'd0001;

         // resource: SobelFilter_LessThan_11Sx11S_1U_4  instance: SobelFilter_LessThan_11Sx11S_1U_4_14
         assign SobelFilter_LessThan_11Sx11S_1U_4_14_out1 = SobelFilter_Add_9Ux3S_11S_4_13_out1[10] ^ SobelFilter_Add_9Ux3S_11S_4_13_out1 < 11'd0512;

         // resource: mux_11bx8i0c
         always @(o_result_r_data[1:0] or s_reg_38[8:0] or s_reg_42 or s_reg_43 or SobelFilter_Add_12Sx10U_12S_4_16_out1[10:0] or SobelFilter_LessThan_11Sx11S_1U_4_20_out1 or SobelFilter_Add_12Sx10U_12S_4_29_out1[10:0] or SobelFilter_Add_10Ux9U_11U_4_62_out1 or SobelFilter_Add_12Sx10U_12S_4_67_out1[10:0] or gs_ctrl1)
          begin :drive_from_tb_r_in1
            case (gs_ctrl1) 

               4'd01:                begin
                  from_tb_r_in1 = s_reg_42;
               end
               
               4'd02:                begin
                  from_tb_r_in1 = SobelFilter_Add_12Sx10U_12S_4_29_out1[10:0];
               end
               
               4'd03:                begin
                  if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                     from_tb_r_in1 = SobelFilter_Add_12Sx10U_12S_4_29_out1[10:0];
                  end
                  else begin
                     from_tb_r_in1 = SobelFilter_Add_10Ux9U_11U_4_62_out1;
                  end
               end
               
               4'd04:                begin
                  from_tb_r_in1 = {2'b00, s_reg_38[8:0]};
               end
               
               4'd05:                begin
                  from_tb_r_in1 = s_reg_43;
               end
               
               4'd06:                begin
                  from_tb_r_in1 = SobelFilter_Add_12Sx10U_12S_4_16_out1[10:0];
               end
               
               4'd07:                begin
                  from_tb_r_in1 = SobelFilter_Add_12Sx10U_12S_4_67_out1[10:0];
               end
               
               4'd08:                begin
                  from_tb_r_in1 = SobelFilter_Add_10Ux9U_11U_4_62_out1;
               end
               
               default:                begin
                  from_tb_r_in1 = {o_result_r_data[1:0], s_reg_38[8:0]};
               end
               
            endcase

         end

         // resource: mux_8bx3i1c
         always @(i_rgb_data[7:0] or from_tb_r_out1 or gs_ctrl2)
          begin :drive_from_tb_r_DIN
            case (gs_ctrl2) 

               2'd1:                begin
                  from_tb_r_DIN = from_tb_r_out1;
               end
               
               2'd2:                begin
                  from_tb_r_DIN = 8'd000;
               end
               
               default:                begin
                  from_tb_r_DIN = i_rgb_data[7:0];
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall0 or SobelFilter_LessThan_11Sx11S_1U_4_20_out1 or SobelFilter_LessThan_2Ux2U_1U_4_32_out1 or SobelFilter_LessThan_2Ux2U_1U_4_57_out1 or gs_ctrl3)
          begin :drive_from_tb_r_CE
            if (stall0) begin
               from_tb_r_CE = 1'b0;
            end
            else begin
               case (gs_ctrl3) 

                  3'd1:                   begin
                     from_tb_r_CE = 1'b1;
                  end
                  
                  3'd2:                   begin
                     if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                        from_tb_r_CE = 1'b0;
                     end
                     else begin
                        from_tb_r_CE = 1'b1;
                     end
                  end
                  
                  3'd3:                   begin
                     if (SobelFilter_LessThan_2Ux2U_1U_4_32_out1) begin
                        from_tb_r_CE = 1'b1;
                     end
                     else begin
                        if (SobelFilter_LessThan_2Ux2U_1U_4_57_out1) begin
                           from_tb_r_CE = 1'b1;
                        end
                        else begin
                           from_tb_r_CE = 1'b0;
                        end
                     end
                  end
                  
                  3'd4:                   begin
                     if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                        from_tb_r_CE = 1'b1;
                     end
                     else begin
                        from_tb_r_CE = 1'b0;
                     end
                  end
                  
                  default:                   begin
                     from_tb_r_CE = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or gs_ctrl4)
          begin :drive_from_tb_r_RW
            if (stall0) begin
               from_tb_r_RW = 1'b0;
            end
            else begin
               if (gs_ctrl4) begin
                  from_tb_r_RW = 1'b1;
               end
               else begin
                  from_tb_r_RW = 1'b0;
               end
            end
         end

         // resource: mux_11bx8i0c
         always @(o_result_r_data[1:0] or s_reg_38[8:0] or s_reg_42 or s_reg_43 or SobelFilter_Add_12Sx10U_12S_4_16_out1[10:0] or SobelFilter_LessThan_11Sx11S_1U_4_20_out1 or SobelFilter_Add_12Sx10U_12S_4_29_out1[10:0] or SobelFilter_Add_10Ux9U_11U_4_62_out1 or SobelFilter_Add_12Sx10U_12S_4_67_out1[10:0] or gs_ctrl5)
          begin :drive_from_tb_g_in1
            case (gs_ctrl5) 

               4'd01:                begin
                  from_tb_g_in1 = SobelFilter_Add_12Sx10U_12S_4_16_out1[10:0];
               end
               
               4'd02:                begin
                  from_tb_g_in1 = SobelFilter_Add_12Sx10U_12S_4_29_out1[10:0];
               end
               
               4'd03:                begin
                  if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                     from_tb_g_in1 = SobelFilter_Add_12Sx10U_12S_4_29_out1[10:0];
                  end
                  else begin
                     from_tb_g_in1 = SobelFilter_Add_10Ux9U_11U_4_62_out1;
                  end
               end
               
               4'd04:                begin
                  from_tb_g_in1 = {2'b00, s_reg_38[8:0]};
               end
               
               4'd05:                begin
                  from_tb_g_in1 = SobelFilter_Add_12Sx10U_12S_4_67_out1[10:0];
               end
               
               4'd06:                begin
                  from_tb_g_in1 = SobelFilter_Add_10Ux9U_11U_4_62_out1;
               end
               
               4'd07:                begin
                  from_tb_g_in1 = s_reg_43;
               end
               
               4'd08:                begin
                  from_tb_g_in1 = s_reg_42;
               end
               
               default:                begin
                  from_tb_g_in1 = {o_result_r_data[1:0], s_reg_38[8:0]};
               end
               
            endcase

         end

         // resource: mux_8bx3i1c
         always @(i_rgb_data[15:8] or from_tb_g_out1 or gs_ctrl2)
          begin :drive_from_tb_g_DIN
            case (gs_ctrl2) 

               2'd1:                begin
                  from_tb_g_DIN = from_tb_g_out1;
               end
               
               2'd2:                begin
                  from_tb_g_DIN = 8'd000;
               end
               
               default:                begin
                  from_tb_g_DIN = i_rgb_data[15:8];
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall0 or SobelFilter_LessThan_11Sx11S_1U_4_20_out1 or SobelFilter_LessThan_2Ux2U_1U_4_32_out1 or SobelFilter_LessThan_2Ux2U_1U_4_57_out1 or gs_ctrl3)
          begin :drive_from_tb_g_CE
            if (stall0) begin
               from_tb_g_CE = 1'b0;
            end
            else begin
               case (gs_ctrl3) 

                  3'd1:                   begin
                     from_tb_g_CE = 1'b1;
                  end
                  
                  3'd2:                   begin
                     if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                        from_tb_g_CE = 1'b0;
                     end
                     else begin
                        from_tb_g_CE = 1'b1;
                     end
                  end
                  
                  3'd3:                   begin
                     if (SobelFilter_LessThan_2Ux2U_1U_4_32_out1) begin
                        from_tb_g_CE = 1'b1;
                     end
                     else begin
                        if (SobelFilter_LessThan_2Ux2U_1U_4_57_out1) begin
                           from_tb_g_CE = 1'b1;
                        end
                        else begin
                           from_tb_g_CE = 1'b0;
                        end
                     end
                  end
                  
                  3'd4:                   begin
                     if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                        from_tb_g_CE = 1'b1;
                     end
                     else begin
                        from_tb_g_CE = 1'b0;
                     end
                  end
                  
                  default:                   begin
                     from_tb_g_CE = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or gs_ctrl4)
          begin :drive_from_tb_g_RW
            if (stall0) begin
               from_tb_g_RW = 1'b0;
            end
            else begin
               if (gs_ctrl4) begin
                  from_tb_g_RW = 1'b1;
               end
               else begin
                  from_tb_g_RW = 1'b0;
               end
            end
         end

         // resource: mux_11bx6i0c
         always @(o_result_r_data[1:0] or s_reg_38[8:0] or SobelFilter_Add_12Sx10U_12S_4_16_out1[10:0] or SobelFilter_LessThan_11Sx11S_1U_4_20_out1 or SobelFilter_Add_12Sx10U_12S_4_29_out1[10:0] or SobelFilter_Add_10Ux9U_11U_4_62_out1 or SobelFilter_Add_12Sx10U_12S_4_67_out1[10:0] or gs_ctrl9)
          begin :drive_from_tb_b_in1
            case (gs_ctrl9) 

               3'd1:                begin
                  from_tb_b_in1 = SobelFilter_Add_12Sx10U_12S_4_16_out1[10:0];
               end
               
               3'd2:                begin
                  from_tb_b_in1 = SobelFilter_Add_12Sx10U_12S_4_29_out1[10:0];
               end
               
               3'd3:                begin
                  if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                     from_tb_b_in1 = SobelFilter_Add_12Sx10U_12S_4_29_out1[10:0];
                  end
                  else begin
                     from_tb_b_in1 = SobelFilter_Add_10Ux9U_11U_4_62_out1;
                  end
               end
               
               3'd4:                begin
                  from_tb_b_in1 = {2'b00, s_reg_38[8:0]};
               end
               
               3'd5:                begin
                  from_tb_b_in1 = SobelFilter_Add_12Sx10U_12S_4_67_out1[10:0];
               end
               
               3'd6:                begin
                  from_tb_b_in1 = SobelFilter_Add_10Ux9U_11U_4_62_out1;
               end
               
               default:                begin
                  from_tb_b_in1 = {o_result_r_data[1:0], s_reg_38[8:0]};
               end
               
            endcase

         end

         // resource: mux_8bx3i1c
         always @(i_rgb_data[23:16] or from_tb_b_out1 or gs_ctrl2)
          begin :drive_from_tb_b_DIN
            case (gs_ctrl2) 

               2'd1:                begin
                  from_tb_b_DIN = from_tb_b_out1;
               end
               
               2'd2:                begin
                  from_tb_b_DIN = 8'd000;
               end
               
               default:                begin
                  from_tb_b_DIN = i_rgb_data[23:16];
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall0 or SobelFilter_LessThan_11Sx11S_1U_4_20_out1 or SobelFilter_LessThan_2Ux2U_1U_4_32_out1 or SobelFilter_LessThan_2Ux2U_1U_4_57_out1 or gs_ctrl3)
          begin :drive_from_tb_b_CE
            if (stall0) begin
               from_tb_b_CE = 1'b0;
            end
            else begin
               case (gs_ctrl3) 

                  3'd1:                   begin
                     from_tb_b_CE = 1'b1;
                  end
                  
                  3'd2:                   begin
                     if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                        from_tb_b_CE = 1'b0;
                     end
                     else begin
                        from_tb_b_CE = 1'b1;
                     end
                  end
                  
                  3'd3:                   begin
                     if (SobelFilter_LessThan_2Ux2U_1U_4_32_out1) begin
                        from_tb_b_CE = 1'b1;
                     end
                     else begin
                        if (SobelFilter_LessThan_2Ux2U_1U_4_57_out1) begin
                           from_tb_b_CE = 1'b1;
                        end
                        else begin
                           from_tb_b_CE = 1'b0;
                        end
                     end
                  end
                  
                  3'd4:                   begin
                     if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                        from_tb_b_CE = 1'b1;
                     end
                     else begin
                        from_tb_b_CE = 1'b0;
                     end
                  end
                  
                  default:                   begin
                     from_tb_b_CE = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or gs_ctrl4)
          begin :drive_from_tb_b_RW
            if (stall0) begin
               from_tb_b_RW = 1'b0;
            end
            else begin
               if (gs_ctrl4) begin
                  from_tb_b_RW = 1'b1;
               end
               else begin
                  from_tb_b_RW = 1'b0;
               end
            end
         end

         // resource: SobelFilter_LessThan_4Sx3S_1U_4  instance: SobelFilter_LessThan_4Sx3S_1U_4_15
         assign SobelFilter_LessThan_4Sx3S_1U_4_15_out1 = o_result_b_data[3] ^ o_result_b_data[3:0] < 4'd03;

         // resource: mux_9bx2i1c
         always @(s_reg_38[8:0] or gs_ctrl13)
          begin :drive_SobelFilter_Add_12Sx10U_12S_4_16_in1_slice
            if (gs_ctrl13) begin
               SobelFilter_Add_12Sx10U_12S_4_16_in1_slice = s_reg_38[8:0];
            end
            else begin
               SobelFilter_Add_12Sx10U_12S_4_16_in1_slice = 9'd000;
            end
         end

         // resource: SobelFilter_Add_12Sx10U_12S_4  instance: SobelFilter_Add_12Sx10U_12S_4_16
         assign SobelFilter_Add_12Sx10U_12S_4_16_out1 = {3'd0, SobelFilter_Add_12Sx10U_12S_4_16_in1_slice} + 12'd1536;

         // resource: SobelFilter_LessThan_11Sx11S_1U_4  instance: SobelFilter_LessThan_11Sx11S_1U_4_20
         assign SobelFilter_LessThan_11Sx11S_1U_4_20_out1 = s_reg_38[10] ^ s_reg_38 < 11'd0512;

         // resource: mux_2bx2i1c
         always @(s_reg_40 or gs_ctrl14)
          begin :drive_SobelFilter_Add_2Ux1U_2U_4_22_in2
            if (gs_ctrl14) begin
               SobelFilter_Add_2Ux1U_2U_4_22_in2 = s_reg_40;
            end
            else begin
               SobelFilter_Add_2Ux1U_2U_4_22_in2 = 2'd0;
            end
         end

         // resource: SobelFilter_Add_2Ux1U_2U_4  instance: SobelFilter_Add_2Ux1U_2U_4_22
         assign SobelFilter_Add_2Ux1U_2U_4_22_out1 = SobelFilter_Add_2Ux1U_2U_4_22_in2 + 2'd1;

         // resource: mux_9bx3i1c
         always @(s_reg_38[8:0] or s_reg_42[8:0] or gs_ctrl15)
          begin :drive_SobelFilter_Add_9Ux2U_10U_4_25_in2
            case (gs_ctrl15) 

               2'd1:                begin
                  SobelFilter_Add_9Ux2U_10U_4_25_in2 = s_reg_42[8:0];
               end
               
               2'd2:                begin
                  SobelFilter_Add_9Ux2U_10U_4_25_in2 = s_reg_38[8:0];
               end
               
               default:                begin
                  SobelFilter_Add_9Ux2U_10U_4_25_in2 = 9'd000;
               end
               
            endcase

         end

         // resource: mux_2bx2i1c
         always @(s_reg_41 or SobelFilter_LessThan_2Ux2U_1U_4_32_out1 or gs_ctrl14)
          begin :drive_SobelFilter_Add_9Ux2U_10U_4_25_in1
            if (gs_ctrl14) begin
               if (SobelFilter_LessThan_2Ux2U_1U_4_32_out1) begin
                  SobelFilter_Add_9Ux2U_10U_4_25_in1 = s_reg_41;
               end
               else begin
                  SobelFilter_Add_9Ux2U_10U_4_25_in1 = 2'd0;
               end
            end
            else begin
               SobelFilter_Add_9Ux2U_10U_4_25_in1 = 2'd0;
            end
         end

         // resource: SobelFilter_Add_9Ux2U_10U_4  instance: SobelFilter_Add_9Ux2U_10U_4_25
         assign SobelFilter_Add_9Ux2U_10U_4_25_out1 = {1'b0, SobelFilter_Add_9Ux2U_10U_4_25_in2} + {8'b00000000, SobelFilter_Add_9Ux2U_10U_4_25_in1};

         // resource: SobelFilter_Add_2Ux1U_2U_4  instance: SobelFilter_Add_2Ux1U_2U_4_26
         assign SobelFilter_Add_2Ux1U_2U_4_26_out1 = SobelFilter_Add_9Ux2U_10U_4_25_in1 + 2'd1;

         // resource: mux_2bx3i1c
         always @(s_reg_39 or s_reg_40 or SobelFilter_LessThan_2Ux2U_1U_4_32_out1 or gs_ctrl14)
          begin :drive_SobelFilter_Add_12Sx10U_12S_4_29_in2_slice
            if (gs_ctrl14) begin
               if (SobelFilter_LessThan_2Ux2U_1U_4_32_out1) begin
                  SobelFilter_Add_12Sx10U_12S_4_29_in2_slice = s_reg_39;
               end
               else begin
                  SobelFilter_Add_12Sx10U_12S_4_29_in2_slice = s_reg_40;
               end
            end
            else begin
               SobelFilter_Add_12Sx10U_12S_4_29_in2_slice = 2'd0;
            end
         end

         // resource: SobelFilter_Add_12Sx10U_12S_4  instance: SobelFilter_Add_12Sx10U_12S_4_29
         assign SobelFilter_Add_12Sx10U_12S_4_29_out1 = {1'b0, {SobelFilter_Add_12Sx10U_12S_4_29_in2_slice, 9'd000}} + {2'b00, SobelFilter_Add_9Ux2U_10U_4_25_out1};

         // resource: mux_2bx3i1c
         always @(s_reg_39 or s_reg_40 or SobelFilter_LessThan_2Ux2U_1U_4_32_out1 or gs_ctrl14)
          begin :drive_SobelFilter_Mul_2Ux2U_4U_4_30_in2
            if (gs_ctrl14) begin
               if (SobelFilter_LessThan_2Ux2U_1U_4_32_out1) begin
                  SobelFilter_Mul_2Ux2U_4U_4_30_in2 = s_reg_39;
               end
               else begin
                  SobelFilter_Mul_2Ux2U_4U_4_30_in2 = s_reg_40;
               end
            end
            else begin
               SobelFilter_Mul_2Ux2U_4U_4_30_in2 = 2'd0;
            end
         end

         // resource: SobelFilter_Mul_2Ux2U_4U_4  instance: SobelFilter_Mul_2Ux2U_4U_4_30
         assign SobelFilter_Mul_2Ux2U_4U_4_30_out1 = {2'b00, SobelFilter_Mul_2Ux2U_4U_4_30_in2}*4'd03;

         // resource: SobelFilter_Add_5Sx2U_5S_4  instance: SobelFilter_Add_5Sx2U_5S_4_31
         assign SobelFilter_Add_5Sx2U_5S_4_31_out1 = {1'b0, SobelFilter_Mul_2Ux2U_4U_4_30_out1} + {3'b000, SobelFilter_Add_9Ux2U_10U_4_25_in1};

         // resource: SobelFilter_LessThan_2Ux2U_1U_4  instance: SobelFilter_LessThan_2Ux2U_1U_4_32
         assign SobelFilter_LessThan_2Ux2U_1U_4_32_out1 = s_reg_41 < 2'd3;

         // resource: SobelFilter_Mul_9Ux8U_17U_4  instance: SobelFilter_Mul_9Ux8U_17U_4_33
         assign SobelFilter_Mul_9Ux8U_17U_4_33_out1 = {9'b000000000, from_tb_r_out1}*17'd000299;

         // resource: SobelFilter_Mul_11Sx8U_19S_4  instance: SobelFilter_Mul_11Sx8U_19S_4_34
         assign SobelFilter_Mul_11Sx8U_19S_4_34_out1 = {11'b00000000000, from_tb_g_out1}*19'd000587;

         // resource: SobelFilter_Mul_9Ux8U_17U_4  instance: SobelFilter_Mul_9Ux8U_17U_4_46
         assign SobelFilter_Mul_9Ux8U_17U_4_46_out1 = {{8'b00000000, 1'b0}, from_tb_b_out1}*17'd000144;

         // instance: drive_SobelFilter_Add_20Sx17U_20S_4_36_in2
         assign SobelFilter_Add_20Sx17U_20S_4_36_in2 = {2'b00, SobelFilter_Mul_11Sx8U_19S_4_34_out1[17:0]};

         // resource: SobelFilter_Add_20Sx17U_20S_4  instance: SobelFilter_Add_20Sx17U_20S_4_36
         assign SobelFilter_Add_20Sx17U_20S_4_36_out1 = SobelFilter_Add_20Sx17U_20S_4_36_in2 + {3'b000, SobelFilter_Mul_9Ux8U_17U_4_33_out1};

         // instance: drive_SobelFilter_Add_20Sx16U_20S_1_39_in2
         assign SobelFilter_Add_20Sx16U_20S_1_39_in2 = {1'b0, SobelFilter_Add_20Sx17U_20S_4_36_out1[18:0]};

         // resource: SobelFilter_Add_20Sx16U_20S_1  instance: SobelFilter_Add_20Sx16U_20S_1_39
         assign SobelFilter_Add_20Sx16U_20S_1_39_out1 = SobelFilter_Add_20Sx16U_20S_1_39_in2 + {4'b0000, SobelFilter_Mul_9Ux8U_17U_4_46_out1[15:0]};

         // instance: drive_filter2_in1
         assign filter2_in1 = SobelFilter_Add_5Sx2U_5S_4_31_out1[3:0];

         // instance: drive_SobelFilter_Div_16Ux7U_8U_1_44_in2
         assign SobelFilter_Div_16Ux7U_8U_1_44_in2 = SobelFilter_Add_20Sx16U_20S_1_39_out1[18:3];

         // resource: SobelFilter_Div_16Ux7U_8U_1  instance: SobelFilter_Div_16Ux7U_8U_1_44
         assign SobelFilter_Div_16Ux7U_8U_1_44_out1 = SobelFilter_Div_16Ux7U_8U_1_44_in2 / 7'd125;

         // resource: SobelFilter_Mul_8Ux8U_8U_4  instance: SobelFilter_Mul_8Ux8U_8U_4_48
         assign SobelFilter_Mul_8Ux8U_8U_4_48_out1 = SobelFilter_Div_16Ux7U_8U_1_44_out1*filter2_out1[7:0];

         // resource: SobelFilter_Add_8Ux8U_8U_1  instance: SobelFilter_Add_8Ux8U_8U_1_51
         assign SobelFilter_Add_8Ux8U_8U_1_51_out1 = SobelFilter_Mul_8Ux8U_8U_4_48_out1 + o_result_r_data;

         // resource: SobelFilter_Add_8Ux8U_8U_1  instance: SobelFilter_Add_8Ux8U_8U_1_54
         assign SobelFilter_Add_8Ux8U_8U_1_54_out1 = SobelFilter_Mul_8Ux8U_8U_4_48_out1 + o_result_g_data;

         // resource: SobelFilter_Add_8Ux8U_8U_1  instance: SobelFilter_Add_8Ux8U_8U_1_56
         assign SobelFilter_Add_8Ux8U_8U_1_56_out1 = SobelFilter_Mul_8Ux8U_8U_4_48_out1 + o_result_b_data;

         // resource: SobelFilter_LessThan_2Ux2U_1U_4  instance: SobelFilter_LessThan_2Ux2U_1U_4_57
         assign SobelFilter_LessThan_2Ux2U_1U_4_57_out1 = s_reg_40 < 2'd3;

         // resource: SobelFilter_Add_8Ux8U_8U_1  instance: SobelFilter_Add_8Ux8U_8U_1_58
         assign SobelFilter_Add_8Ux8U_8U_1_58_out1 = SobelFilter_Add_8Ux8U_8U_1_51_out1 + 8'd128;

         // resource: SobelFilter_Add_8Ux8U_8U_4  instance: SobelFilter_Add_8Ux8U_8U_4_59
         assign SobelFilter_Add_8Ux8U_8U_4_59_out1 = o_result_g_data + 8'd128;

         // resource: SobelFilter_Add_8Ux8U_8U_4  instance: SobelFilter_Add_8Ux8U_8U_4_60
         assign SobelFilter_Add_8Ux8U_8U_4_60_out1 = o_result_b_data + 8'd128;

         // resource: mux_9bx2i1c
         always @(s_reg_38[8:0] or gs_ctrl21)
          begin :drive_SobelFilter_Add_10Ux9U_11U_4_62_in1
            if (gs_ctrl21) begin
               SobelFilter_Add_10Ux9U_11U_4_62_in1 = s_reg_38[8:0];
            end
            else begin
               SobelFilter_Add_10Ux9U_11U_4_62_in1 = 9'd000;
            end
         end

         // resource: SobelFilter_Add_10Ux9U_11U_4  instance: SobelFilter_Add_10Ux9U_11U_4_62
         assign SobelFilter_Add_10Ux9U_11U_4_62_out1 = {2'b00, SobelFilter_Add_10Ux9U_11U_4_62_in1} + 11'd0512;

         // resource: SobelFilter_Add_12Sx10U_12S_4  instance: SobelFilter_Add_12Sx10U_12S_4_67
         assign SobelFilter_Add_12Sx10U_12S_4_67_out1 = {{2'b00, 1'b0}, s_reg_38[8:0]} + 12'd1024;

         // resource: regr_en_sc_5
         always @(posedge i_clk)
          begin :drive_global_state
            if (i_rst == 1'b0) begin
               global_state <= 5'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     global_state <= global_state_next;
                  end
                  
               endcase

            end
         end

         // resource: mux_5bx5i4c
         always @(s_reg_39[0] or SobelFilter_LessThan_4Sx3S_1U_4_15_out1 or SobelFilter_LessThan_11Sx11S_1U_4_20_out1 or SobelFilter_LessThan_2Ux2U_1U_4_32_out1 or SobelFilter_LessThan_2Ux2U_1U_4_57_out1 or global_state)
          begin :drive_global_state_next
            case (global_state) 

               5'd02:                begin
                  if (s_reg_39[0]) begin
                     global_state_next = 5'd01;
                  end
                  else begin
                     if (SobelFilter_LessThan_4Sx3S_1U_4_15_out1) begin
                        global_state_next = 5'd01;
                     end
                     else begin
                        global_state_next = global_state + 5'd01;
                     end
                  end
               end
               
               5'd04:                begin
                  if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                     global_state_next = 5'd03;
                  end
                  else begin
                     global_state_next = global_state + 5'd01;
                  end
               end
               
               5'd05:                begin
                  if (SobelFilter_LessThan_2Ux2U_1U_4_32_out1) begin
                     global_state_next = 5'd05;
                  end
                  else begin
                     if (SobelFilter_LessThan_2Ux2U_1U_4_57_out1) begin
                        global_state_next = 5'd05;
                     end
                     else begin
                        global_state_next = global_state + 5'd01;
                     end
                  end
               end
               
               5'd09:                begin
                  if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                     global_state_next = 5'd05;
                  end
                  else begin
                     global_state_next = global_state + 5'd01;
                  end
               end
               
               5'd16:                begin
                  if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                     global_state_next = 5'd10;
                  end
                  else begin
                     global_state_next = 5'd03;
                  end
               end
               
               default:                begin
                  global_state_next = global_state + 5'd01;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl0
            if (i_rst == 1'b0) begin
               gs_ctrl0 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd04:                         begin
                           gs_ctrl0 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl0 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_4bx9i9c
         // resource: regr_en_sc_4
         always @(posedge i_clk)
          begin :drive_gs_ctrl1
            if (i_rst == 1'b0) begin
               gs_ctrl1 <= 4'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd03, 5'd11:                         begin
                           gs_ctrl1 <= 4'd01;
                        end
                        
                        5'd04, 5'd05:                         begin
                           gs_ctrl1 <= 4'd02;
                        end
                        
                        5'd09:                         begin
                           gs_ctrl1 <= 4'd03;
                        end
                        
                        5'd10:                         begin
                           gs_ctrl1 <= 4'd04;
                        end
                        
                        5'd12:                         begin
                           gs_ctrl1 <= 4'd05;
                        end
                        
                        5'd13, 5'd15:                         begin
                           gs_ctrl1 <= 4'd06;
                        end
                        
                        5'd14:                         begin
                           gs_ctrl1 <= 4'd07;
                        end
                        
                        5'd16:                         begin
                           gs_ctrl1 <= 4'd08;
                        end
                        
                        default:                         begin
                           gs_ctrl1 <= 4'd00;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl2
            if (i_rst == 1'b0) begin
               gs_ctrl2 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd10, 5'd12, 5'd14:                         begin
                           gs_ctrl2 <= 2'd1;
                        end
                        
                        5'd15:                         begin
                           gs_ctrl2 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl2 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl3
            if (i_rst == 1'b0) begin
               gs_ctrl3 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd01, 5'd03, 5'd09, 5'd10, 5'd11, 5'd12, 5'd13, 5'd14, 5'd15:                         begin
                           gs_ctrl3 <= 3'd1;
                        end
                        
                        5'd04:                         begin
                           gs_ctrl3 <= 3'd2;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl3 <= 3'd3;
                        end
                        
                        5'd16:                         begin
                           gs_ctrl3 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl3 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl4
            if (i_rst == 1'b0) begin
               gs_ctrl4 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd01, 5'd03, 5'd10, 5'd12, 5'd14, 5'd15:                         begin
                           gs_ctrl4 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl4 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_4bx9i9c
         // resource: regr_en_sc_4
         always @(posedge i_clk)
          begin :drive_gs_ctrl5
            if (i_rst == 1'b0) begin
               gs_ctrl5 <= 4'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd03, 5'd15:                         begin
                           gs_ctrl5 <= 4'd01;
                        end
                        
                        5'd04, 5'd05:                         begin
                           gs_ctrl5 <= 4'd02;
                        end
                        
                        5'd09:                         begin
                           gs_ctrl5 <= 4'd03;
                        end
                        
                        5'd10:                         begin
                           gs_ctrl5 <= 4'd04;
                        end
                        
                        5'd11:                         begin
                           gs_ctrl5 <= 4'd05;
                        end
                        
                        5'd12, 5'd16:                         begin
                           gs_ctrl5 <= 4'd06;
                        end
                        
                        5'd13:                         begin
                           gs_ctrl5 <= 4'd07;
                        end
                        
                        5'd14:                         begin
                           gs_ctrl5 <= 4'd08;
                        end
                        
                        default:                         begin
                           gs_ctrl5 <= 4'd00;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx7i7c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl9
            if (i_rst == 1'b0) begin
               gs_ctrl9 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd03, 5'd13, 5'd15:                         begin
                           gs_ctrl9 <= 3'd1;
                        end
                        
                        5'd04, 5'd05:                         begin
                           gs_ctrl9 <= 3'd2;
                        end
                        
                        5'd09:                         begin
                           gs_ctrl9 <= 3'd3;
                        end
                        
                        5'd10:                         begin
                           gs_ctrl9 <= 3'd4;
                        end
                        
                        5'd11, 5'd14:                         begin
                           gs_ctrl9 <= 3'd5;
                        end
                        
                        5'd12, 5'd16:                         begin
                           gs_ctrl9 <= 3'd6;
                        end
                        
                        default:                         begin
                           gs_ctrl9 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl13
            if (i_rst == 1'b0) begin
               gs_ctrl13 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd03, 5'd04, 5'd12, 5'd13, 5'd15:                         begin
                           gs_ctrl13 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl13 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl14
            if (i_rst == 1'b0) begin
               gs_ctrl14 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd05:                         begin
                           gs_ctrl14 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl14 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl15
            if (i_rst == 1'b0) begin
               gs_ctrl15 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd05:                         begin
                           gs_ctrl15 <= 2'd1;
                        end
                        
                        5'd09:                         begin
                           gs_ctrl15 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl15 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl21
            if (i_rst == 1'b0) begin
               gs_ctrl21 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd10, 5'd12, 5'd16:                         begin
                           gs_ctrl21 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl21 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // instance: drive_i_rgb_busy
         assign i_rgb_busy = SobelFilter_gen_busy_r_4_86_out1[2];

         // resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_86
         assign SobelFilter_gen_busy_r_4_86_out1 = {SobelFilter_gen_busy_r_4_86_gnew_req, {SobelFilter_gen_busy_r_4_86_gdiv, SobelFilter_gen_busy_r_4_86_gen_busy_i_rgb_m_data_is_invalid_next}};

         // resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_86
         assign SobelFilter_gen_busy_r_4_86_gen_busy_i_rgb_m_data_is_invalid_next = ~SobelFilter_gen_busy_r_4_86_gdiv;

         // resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_86
         assign SobelFilter_gen_busy_r_4_86_gdiv = i_rgb_vld & !SobelFilter_gen_busy_r_4_86_gnew_req;

         // resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_86
         assign SobelFilter_gen_busy_r_4_86_gnew_req = i_rgb_m_busy_req_0 & (i_rgb_m_unvalidated_req | i_rgb_vld);

         // resource: regr_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_m_unvalidated_req
            if (i_rst == 1'b0) begin
               i_rgb_m_unvalidated_req <= 1'd1;
            end
            else begin
               i_rgb_m_unvalidated_req <= SobelFilter_N_Muxb_1_2_3_4_10_out1;
            end
         end

         // resource: SobelFilter_N_Muxb_1_2_3_4
         always @(i_rgb_vld or i_rgb_m_busy_req_0 or i_rgb_m_unvalidated_req)
          begin :SobelFilter_N_Muxb_1_2_3_4_10
            if (i_rgb_m_busy_req_0) begin
               SobelFilter_N_Muxb_1_2_3_4_10_out1 = i_rgb_m_unvalidated_req;
            end
            else begin
               SobelFilter_N_Muxb_1_2_3_4_10_out1 = i_rgb_vld;
            end
         end

         // instance: drive_o_result_r_vld
         assign o_result_r_vld = SobelFilter_Or_1Ux1U_1U_4_2_out1;

         // resource: SobelFilter_Or_1Ux1U_1U_4  instance: SobelFilter_Or_1Ux1U_1U_4_2
         assign SobelFilter_Or_1Ux1U_1U_4_2_out1 = o_result_r_m_unacked_req | SobelFilter_Xor_1Ux1U_1U_1_1_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_r_m_unacked_req
            if (i_rst == 1'b0) begin
               o_result_r_m_unacked_req <= 1'd0;
            end
            else begin
               o_result_r_m_unacked_req <= SobelFilter_And_1Ux1U_1U_4_82_out1;
            end
         end

         // resource: SobelFilter_And_1Ux1U_1U_4  instance: SobelFilter_And_1Ux1U_1U_4_82
         assign SobelFilter_And_1Ux1U_1U_4_82_out1 = o_result_r_busy & o_result_r_vld;

         // resource: SobelFilter_Xor_1Ux1U_1U_1  instance: SobelFilter_Xor_1Ux1U_1U_1_1
         assign SobelFilter_Xor_1Ux1U_1U_1_1_out1 = o_result_r_m_req_m_trig_req ^ o_result_r_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_r_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_result_r_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_result_r_m_req_m_prev_trig_req <= o_result_r_m_req_m_trig_req;
            end
         end

         // resource: SobelFilter_Not_1U_1U_1  instance: SobelFilter_Not_1U_1U_1_3
         assign SobelFilter_Not_1U_1U_1_3_out1 = !o_result_r_m_req_m_trig_req;

         // instance: drive_o_result_g_vld
         assign o_result_g_vld = SobelFilter_Or_1Ux1U_1U_4_5_out1;

         // resource: SobelFilter_Or_1Ux1U_1U_4  instance: SobelFilter_Or_1Ux1U_1U_4_5
         assign SobelFilter_Or_1Ux1U_1U_4_5_out1 = o_result_g_m_unacked_req | SobelFilter_Xor_1Ux1U_1U_1_4_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_g_m_unacked_req
            if (i_rst == 1'b0) begin
               o_result_g_m_unacked_req <= 1'd0;
            end
            else begin
               o_result_g_m_unacked_req <= SobelFilter_And_1Ux1U_1U_4_83_out1;
            end
         end

         // resource: SobelFilter_And_1Ux1U_1U_4  instance: SobelFilter_And_1Ux1U_1U_4_83
         assign SobelFilter_And_1Ux1U_1U_4_83_out1 = o_result_g_busy & o_result_g_vld;

         // resource: SobelFilter_Xor_1Ux1U_1U_1  instance: SobelFilter_Xor_1Ux1U_1U_1_4
         assign SobelFilter_Xor_1Ux1U_1U_1_4_out1 = o_result_g_m_req_m_trig_req ^ o_result_g_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_g_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_result_g_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_result_g_m_req_m_prev_trig_req <= o_result_g_m_req_m_trig_req;
            end
         end

         // resource: SobelFilter_Not_1U_1U_1  instance: SobelFilter_Not_1U_1U_1_6
         assign SobelFilter_Not_1U_1U_1_6_out1 = !o_result_g_m_req_m_trig_req;

         // instance: drive_o_result_b_vld
         assign o_result_b_vld = SobelFilter_Or_1Ux1U_1U_4_8_out1;

         // resource: SobelFilter_Or_1Ux1U_1U_4  instance: SobelFilter_Or_1Ux1U_1U_4_8
         assign SobelFilter_Or_1Ux1U_1U_4_8_out1 = o_result_b_m_unacked_req | SobelFilter_Xor_1Ux1U_1U_1_7_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_b_m_unacked_req
            if (i_rst == 1'b0) begin
               o_result_b_m_unacked_req <= 1'd0;
            end
            else begin
               o_result_b_m_unacked_req <= SobelFilter_And_1Ux1U_1U_4_84_out1;
            end
         end

         // resource: SobelFilter_And_1Ux1U_1U_4  instance: SobelFilter_And_1Ux1U_1U_4_84
         assign SobelFilter_And_1Ux1U_1U_4_84_out1 = o_result_b_busy & o_result_b_vld;

         // resource: SobelFilter_Xor_1Ux1U_1U_1  instance: SobelFilter_Xor_1Ux1U_1U_1_7
         assign SobelFilter_Xor_1Ux1U_1U_1_7_out1 = o_result_b_m_req_m_trig_req ^ o_result_b_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_b_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_result_b_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_result_b_m_req_m_prev_trig_req <= o_result_b_m_req_m_trig_req;
            end
         end

         // resource: SobelFilter_Not_1U_1U_1  instance: SobelFilter_Not_1U_1U_1_9
         assign SobelFilter_Not_1U_1U_1_9_out1 = !o_result_b_m_req_m_trig_req;


endmodule

