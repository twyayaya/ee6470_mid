// Generated by stratus_hls 19.12-s100  (91710.131054)
// Mon May  3 02:43:23 2021
// from ../SobelFilter.cpp

`timescale 1ps / 1ps

      
module SobelFilter(i_clk, i_rst, i_rgb_busy, i_rgb_vld, i_rgb_data, o_result_r_busy, o_result_r_vld, o_result_r_data, o_result_g_busy, o_result_g_vld, o_result_g_data, o_result_b_busy, o_result_b_vld, o_result_b_data);

      input i_clk;
      input i_rst;
      input i_rgb_vld;
      input [23:0] i_rgb_data;
      input o_result_r_busy;
      input o_result_g_busy;
      input o_result_b_busy;
      output i_rgb_busy;
      output o_result_r_vld;
      output [7:0] o_result_r_data;
      reg [7:0] o_result_r_data;
      output o_result_g_vld;
      output [7:0] o_result_g_data;
      reg [7:0] o_result_g_data;
      output o_result_b_vld;
      output [7:0] o_result_b_data;
      reg [7:0] o_result_b_data;
      reg o_result_b_m_req_m_prev_trig_req;
      reg o_result_b_m_unacked_req;
      wire SobelFilter_Xor_1Ux1U_1U_1_7_out1;
      wire SobelFilter_Or_1Ux1U_1U_4_8_out1;
      reg o_result_g_m_req_m_prev_trig_req;
      reg o_result_g_m_unacked_req;
      wire SobelFilter_Xor_1Ux1U_1U_1_4_out1;
      wire SobelFilter_Or_1Ux1U_1U_4_5_out1;
      reg o_result_r_m_req_m_prev_trig_req;
      reg o_result_r_m_unacked_req;
      wire SobelFilter_Xor_1Ux1U_1U_1_1_out1;
      wire SobelFilter_Or_1Ux1U_1U_4_2_out1;
      reg SobelFilter_N_Muxb_1_2_23_4_10_out1;
      reg i_rgb_m_unvalidated_req;
      wire SobelFilter_gen_busy_r_4_61_gnew_req;
      wire SobelFilter_gen_busy_r_4_61_gdiv;
      wire SobelFilter_gen_busy_r_4_61_gen_busy_i_rgb_m_data_is_invalid_next;
      reg[4:0] global_state_next;
      reg[8:0] SobelFilter_gen000001_4_43_in1;
      reg gs_ctrl19;
      /*signed*/reg[7:0] SobelFilter_Add2Mul2s8u8s8_4_30_in3;
      reg[1:0] gs_ctrl18;
      wire[7:0] SobelFilter_Div_8U_27_4_29_out1;
      wire[15:0] SobelFilter_R18_3Add3Mul2i144u8Mul2iLLu8Mul2i299u8_4_28_out1;
      wire[18:0] bits_001;
      reg[7:0] SobelFilter_R18_3Add3Mul2i144u8Mul2iLLu8Mul2i299u8_4_28_in1;
      reg gs_ctrl17;
      wire[3:0] SobelFilter_Add2u2Mul2i3u2_4_22_out1;
      reg[1:0] SobelFilter_Add2u2Mul2i3u2_4_22_in1;
      reg[1:0] SobelFilter_Add2u2Mul2i3u2_4_22_in2;
      reg gs_ctrl15;
      reg[8:0] SobelFilter_Add3u9u2Cati0u2_4_21_in1;
      reg[1:0] gs_ctrl14;
      reg[1:0] SobelFilter_Add3u9u2Cati0u2_4_21_in2;
      reg[1:0] SobelFilter_Add3u9u2Cati0u2_4_21_in3;
      reg[1:0] gs_ctrl12;
      wire SobelFilter_Lti2s3_4_15_out1;
      reg[1:0] gs_ctrl10;
      reg[2:0] gs_ctrl8;
      reg[1:0] gs_ctrl6;
      reg[2:0] gs_ctrl4;
      reg gs_ctrl3;
      wire SobelFilter_Lti3u2_4_38_out1;
      reg[2:0] gs_ctrl2;
      reg[1:0] gs_ctrl1;
      wire[10:0] SobelFilter_Add2iLLu9_4_18_out1;
      wire[10:0] SobelFilter_Add3u9u2Cati0u2_4_21_out1;
      wire[10:0] SobelFilter_gen000001_4_43_out1;
      wire[10:0] SobelFilter_Add2iLLu9_4_53_out1;
      wire[10:0] SobelFilter_gen000001_4_49_out1;
      reg[2:0] gs_ctrl0;
      reg[7:0] s_reg_45;
      reg[7:0] s_reg_44;
      reg[7:0] s_reg_42;
      reg[7:0] s_reg_41;
      wire[1:0] SobelFilter_Add2i1u2_4_26_out1;
      reg[1:0] s_reg_40;
      wire[1:0] SobelFilter_Add2i1u2_4_25_out1;
      /*signed*/wire[2:0] SobelFilter_Add2i1u1_4_12_out1;
      reg[10:0] s_reg_43;
      /*signed*/wire[10:0] SobelFilter_Add2i1u9_4_13_out1;
      reg[10:0] s_reg_38;
      wire SobelFilter_Lti3u2_4_34_out1;
      reg[2:0] s_reg_39;
      wire SobelFilter_LtiLLs11_4_14_out1;
      reg[1:0] s_reg_37_slice;
      wire SobelFilter_And_1Ux1U_1U_4_57_out1;
      wire SobelFilter_And_1Ux1U_1U_4_58_out1;
      wire SobelFilter_And_1Ux1U_1U_4_59_out1;
      wire[2:0] SobelFilter_gen_busy_r_4_61_out1;
      wire SobelFilter_Not_1U_1U_1_9_out1;
      reg o_result_b_m_req_m_trig_req;
      wire SobelFilter_Not_1U_1U_1_6_out1;
      reg o_result_g_m_req_m_trig_req;
      wire SobelFilter_Not_1U_1U_1_3_out1;
      reg o_result_r_m_req_m_trig_req;
      wire SobelFilter_LtiLLs11_4_56_out1;
      reg i_rgb_m_busy_req_0;
      /*signed*/wire[7:0] SobelFilter_Add2n128s8_4_39_out1;
      /*signed*/wire[7:0] SobelFilter_Add2n128s8_4_40_out1;
      wire SobelFilter_LtiLLs11_4_42_out1;
      /*signed*/wire[7:0] SobelFilter_Add2n128s8_4_41_out1;
      /*signed*/wire[7:0] SobelFilter_Add2Mul2s8u8s8_4_30_out1;
      wire SobelFilter_LtiLLs11_4_20_out1;
      reg[4:0] global_state;
      reg stall0;
      wire[3:0] filter2_in1;
      wire[31:0] filter2_out1;
      reg[7:0] from_tb_b_DIN;
      reg from_tb_b_CE;
      reg from_tb_b_RW;
      reg[10:0] from_tb_b_in1;
      wire[7:0] from_tb_b_out1;
      reg[7:0] from_tb_g_DIN;
      reg from_tb_g_CE;
      reg from_tb_g_RW;
      reg[10:0] from_tb_g_in1;
      wire[7:0] from_tb_g_out1;
      reg[7:0] from_tb_r_DIN;
      reg from_tb_r_CE;
      reg from_tb_r_RW;
      reg[10:0] from_tb_r_in1;
      wire[7:0] from_tb_r_out1;

         SobelFilter_RAM_1536X8_1 from_tb_r(
                                    .DIN( from_tb_r_DIN ),
                                    .CE( from_tb_r_CE ),
                                    .RW( from_tb_r_RW ),
                                    .in1( from_tb_r_in1 ),
                                    .out1( from_tb_r_out1 ),
                                    .clk( i_clk )
                                  );

         SobelFilter_RAM_1536X8_1 from_tb_g(
                                    .DIN( from_tb_g_DIN ),
                                    .CE( from_tb_g_CE ),
                                    .RW( from_tb_g_RW ),
                                    .in1( from_tb_g_in1 ),
                                    .out1( from_tb_g_out1 ),
                                    .clk( i_clk )
                                  );

         SobelFilter_RAM_1536X8_1 from_tb_b(
                                    .DIN( from_tb_b_DIN ),
                                    .CE( from_tb_b_CE ),
                                    .RW( from_tb_b_RW ),
                                    .in1( from_tb_b_in1 ),
                                    .out1( from_tb_b_out1 ),
                                    .clk( i_clk )
                                  );

         SobelFilter_ROM_9X32_filter2 filter2(
                                        .in1( filter2_in1 ),
                                        .out1( filter2_out1 ),
                                        .clk( i_clk )
                                      );

         // resource: mux_8bx3i1c
         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_o_result_b_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd04:                      begin
                        if (SobelFilter_LtiLLs11_4_20_out1) begin
                        end
                        else begin
                           o_result_b_data <= 8'd000;
                        end
                     end
                     
                     5'd09:                      begin
                        /* state21 */
                        o_result_b_data <= SobelFilter_Add2Mul2s8u8s8_4_30_out1;
                     end
                     
                     5'd13:                      begin
                        o_result_b_data <= SobelFilter_Add2n128s8_4_41_out1;
                     end
                     
                     5'd15:                      begin
                        if (SobelFilter_LtiLLs11_4_42_out1) begin
                           o_result_b_data <= 8'd000;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_8bx3i1c
         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_o_result_g_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd04:                      begin
                        if (SobelFilter_LtiLLs11_4_20_out1) begin
                        end
                        else begin
                           o_result_g_data <= 8'd000;
                        end
                     end
                     
                     5'd08:                      begin
                        o_result_g_data <= SobelFilter_Add2Mul2s8u8s8_4_30_out1;
                     end
                     
                     5'd12:                      begin
                        o_result_g_data <= SobelFilter_Add2n128s8_4_40_out1;
                     end
                     
                     5'd15:                      begin
                        if (SobelFilter_LtiLLs11_4_42_out1) begin
                           o_result_g_data <= 8'd000;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_8bx3i1c
         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_o_result_r_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd04:                      begin
                        if (SobelFilter_LtiLLs11_4_20_out1) begin
                        end
                        else begin
                           o_result_r_data <= 8'd000;
                        end
                     end
                     
                     5'd07:                      begin
                        o_result_r_data <= SobelFilter_Add2Mul2s8u8s8_4_30_out1;
                     end
                     
                     5'd11:                      begin
                        o_result_r_data <= SobelFilter_Add2n128s8_4_39_out1;
                     end
                     
                     5'd15:                      begin
                        if (SobelFilter_LtiLLs11_4_42_out1) begin
                           o_result_r_data <= 8'd000;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_m_busy_req_0
            if (i_rst == 1'b0) begin
               i_rgb_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd00, 5'd02:                         begin
                           i_rgb_m_busy_req_0 <= 1'd0;
                        end
                        
                        5'd01, 5'd03:                         begin
                           i_rgb_m_busy_req_0 <= 1'd1;
                        end
                        
                        5'd04:                         begin
                           if (SobelFilter_LtiLLs11_4_20_out1) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        5'd20:                         begin
                           if (SobelFilter_LtiLLs11_4_56_out1) begin
                           end
                           else begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_r_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_result_r_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd11:                         begin
                           o_result_r_m_req_m_trig_req <= SobelFilter_Not_1U_1U_1_3_out1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_g_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_result_g_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd12:                         begin
                           o_result_g_m_req_m_trig_req <= SobelFilter_Not_1U_1U_1_6_out1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_b_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_result_b_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd13:                         begin
                           o_result_b_m_req_m_trig_req <= SobelFilter_Not_1U_1U_1_9_out1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx5i1c
         always @(SobelFilter_And_1Ux1U_1U_4_57_out1 or SobelFilter_And_1Ux1U_1U_4_58_out1 or SobelFilter_And_1Ux1U_1U_4_59_out1 or SobelFilter_gen_busy_r_4_61_out1[0] or global_state)
          begin :drive_stall0
            case (global_state) 

               5'd01, 5'd03:                begin
                  stall0 = SobelFilter_gen_busy_r_4_61_out1[0];
               end
               
               5'd12:                begin
                  stall0 = SobelFilter_And_1Ux1U_1U_4_57_out1;
               end
               
               5'd13:                begin
                  stall0 = SobelFilter_And_1Ux1U_1U_4_58_out1;
               end
               
               5'd14:                begin
                  stall0 = SobelFilter_And_1Ux1U_1U_4_59_out1;
               end
               
               default:                begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: mux_2bx2i1c
         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_37_slice
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd00, 5'd04, 5'd15:                      begin
                        s_reg_37_slice <= 2'd0;
                     end
                     
                     5'd02:                      begin
                        if (SobelFilter_LtiLLs11_4_14_out1) begin
                        end
                        else begin
                           s_reg_37_slice <= s_reg_39[1:0];
                        end
                     end
                     
                     5'd09:                      begin
                        if (SobelFilter_Lti3u2_4_34_out1) begin
                        end
                        else begin
                           s_reg_37_slice <= s_reg_39[1:0];
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_11bx3i1c
         // resource: regr_en_11
         always @(posedge i_clk)
          begin :drive_s_reg_38
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd00:                      begin
                        s_reg_38 <= 11'd0000;
                     end
                     
                     5'd01, 5'd03, 5'd19:                      begin
                        s_reg_38 <= SobelFilter_Add2i1u9_4_13_out1;
                     end
                     
                     5'd02:                      begin
                        if (SobelFilter_LtiLLs11_4_14_out1) begin
                        end
                        else begin
                           s_reg_38 <= 11'd0000;
                        end
                     end
                     
                     5'd04:                      begin
                        if (SobelFilter_LtiLLs11_4_20_out1) begin
                        end
                        else begin
                           s_reg_38 <= 11'd0000;
                        end
                     end
                     
                     5'd15:                      begin
                        if (SobelFilter_LtiLLs11_4_42_out1) begin
                           s_reg_38 <= s_reg_43;
                        end
                        else begin
                           s_reg_38 <= 11'd0000;
                        end
                     end
                     
                     5'd20:                      begin
                        if (SobelFilter_LtiLLs11_4_56_out1) begin
                        end
                        else begin
                           s_reg_38 <= 11'd0000;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_3bx2i0c
         // resource: regr_en_3
         always @(posedge i_clk)
          begin :drive_s_reg_39
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd01:                      begin
                        s_reg_39 <= SobelFilter_Add2i1u1_4_12_out1;
                     end
                     
                     5'd06:                      begin
                        s_reg_39 <= {1'b0, SobelFilter_Add2i1u2_4_25_out1};
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx2i1c
         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_40
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd04, 5'd15:                      begin
                        s_reg_40 <= 2'd0;
                     end
                     
                     5'd06:                      begin
                        s_reg_40 <= SobelFilter_Add2i1u2_4_26_out1;
                     end
                     
                     5'd09:                      begin
                        if (SobelFilter_Lti3u2_4_34_out1) begin
                        end
                        else begin
                           s_reg_40 <= 2'd0;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_41
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd05:                      begin
                        s_reg_41 <= from_tb_r_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_42
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd05:                      begin
                        s_reg_42 <= filter2_out1[7:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_11
         always @(posedge i_clk)
          begin :drive_s_reg_43
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd06:                      begin
                        s_reg_43 <= SobelFilter_Add2i1u9_4_13_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_44
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd06:                      begin
                        s_reg_44 <= from_tb_g_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_45
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd07:                      begin
                        s_reg_45 <= from_tb_b_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: SobelFilter_Add2i1u1_4  instance: SobelFilter_Add2i1u1_4_12
         assign SobelFilter_Add2i1u1_4_12_out1 = {2'b00, s_reg_37_slice[0]} + 3'd1;

         // resource: SobelFilter_Add2i1u9_4  instance: SobelFilter_Add2i1u9_4_13
         assign SobelFilter_Add2i1u9_4_13_out1 = {2'b00, s_reg_38[8:0]} + 11'd0001;

         // resource: SobelFilter_LtiLLs11_4  instance: SobelFilter_LtiLLs11_4_14
         assign SobelFilter_LtiLLs11_4_14_out1 = s_reg_38[10] ^ s_reg_38 < 11'd0512;

         // resource: mux_11bx7i0c
         always @(s_reg_38[8:0] or SobelFilter_Add2iLLu9_4_18_out1 or SobelFilter_Add3u9u2Cati0u2_4_21_out1 or SobelFilter_LtiLLs11_4_42_out1 or SobelFilter_gen000001_4_43_out1 or SobelFilter_Add2iLLu9_4_53_out1 or SobelFilter_gen000001_4_49_out1 or gs_ctrl0 or s_reg_37_slice[0])
          begin :drive_from_tb_r_in1
            case (gs_ctrl0) 

               3'd1:                begin
                  from_tb_r_in1 = SobelFilter_Add2iLLu9_4_18_out1;
               end
               
               3'd2:                begin
                  from_tb_r_in1 = SobelFilter_Add3u9u2Cati0u2_4_21_out1;
               end
               
               3'd3:                begin
                  if (SobelFilter_LtiLLs11_4_42_out1) begin
                     from_tb_r_in1 = SobelFilter_Add3u9u2Cati0u2_4_21_out1;
                  end
                  else begin
                     from_tb_r_in1 = SobelFilter_gen000001_4_43_out1;
                  end
               end
               
               3'd4:                begin
                  from_tb_r_in1 = {2'b00, s_reg_38[8:0]};
               end
               
               3'd5:                begin
                  from_tb_r_in1 = SobelFilter_Add2iLLu9_4_53_out1;
               end
               
               3'd6:                begin
                  from_tb_r_in1 = SobelFilter_gen000001_4_49_out1;
               end
               
               3'd7:                begin
                  from_tb_r_in1 = SobelFilter_gen000001_4_43_out1;
               end
               
               default:                begin
                  from_tb_r_in1 = {{1'b0, s_reg_37_slice[0]}, s_reg_38[8:0]};
               end
               
            endcase

         end

         // resource: mux_8bx3i1c
         always @(i_rgb_data[7:0] or from_tb_r_out1 or gs_ctrl1)
          begin :drive_from_tb_r_DIN
            case (gs_ctrl1) 

               2'd1:                begin
                  from_tb_r_DIN = from_tb_r_out1;
               end
               
               2'd2:                begin
                  from_tb_r_DIN = 8'd000;
               end
               
               default:                begin
                  from_tb_r_DIN = i_rgb_data[7:0];
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall0 or SobelFilter_LtiLLs11_4_20_out1 or SobelFilter_Lti3u2_4_34_out1 or SobelFilter_Lti3u2_4_38_out1 or SobelFilter_LtiLLs11_4_56_out1 or gs_ctrl2)
          begin :drive_from_tb_r_CE
            if (stall0) begin
               from_tb_r_CE = 1'b0;
            end
            else begin
               case (gs_ctrl2) 

                  3'd1:                   begin
                     from_tb_r_CE = 1'b1;
                  end
                  
                  3'd2:                   begin
                     if (SobelFilter_LtiLLs11_4_20_out1) begin
                        from_tb_r_CE = 1'b0;
                     end
                     else begin
                        from_tb_r_CE = 1'b1;
                     end
                  end
                  
                  3'd3:                   begin
                     if (SobelFilter_Lti3u2_4_34_out1) begin
                        from_tb_r_CE = 1'b1;
                     end
                     else begin
                        if (SobelFilter_Lti3u2_4_38_out1) begin
                           from_tb_r_CE = 1'b1;
                        end
                        else begin
                           from_tb_r_CE = 1'b0;
                        end
                     end
                  end
                  
                  3'd4:                   begin
                     if (SobelFilter_LtiLLs11_4_56_out1) begin
                        from_tb_r_CE = 1'b1;
                     end
                     else begin
                        from_tb_r_CE = 1'b0;
                     end
                  end
                  
                  default:                   begin
                     from_tb_r_CE = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or gs_ctrl3)
          begin :drive_from_tb_r_RW
            if (stall0) begin
               from_tb_r_RW = 1'b0;
            end
            else begin
               if (gs_ctrl3) begin
                  from_tb_r_RW = 1'b1;
               end
               else begin
                  from_tb_r_RW = 1'b0;
               end
            end
         end

         // resource: mux_11bx7i0c
         always @(s_reg_38[8:0] or SobelFilter_Add2iLLu9_4_18_out1 or SobelFilter_Add3u9u2Cati0u2_4_21_out1 or SobelFilter_gen000001_4_43_out1 or SobelFilter_Add2iLLu9_4_53_out1 or SobelFilter_gen000001_4_49_out1 or gs_ctrl4 or s_reg_37_slice[0])
          begin :drive_from_tb_g_in1
            case (gs_ctrl4) 

               3'd1:                begin
                  from_tb_g_in1 = SobelFilter_Add2iLLu9_4_18_out1;
               end
               
               3'd2:                begin
                  from_tb_g_in1 = SobelFilter_Add3u9u2Cati0u2_4_21_out1;
               end
               
               3'd3:                begin
                  from_tb_g_in1 = SobelFilter_gen000001_4_43_out1;
               end
               
               3'd4:                begin
                  from_tb_g_in1 = {2'b00, s_reg_38[8:0]};
               end
               
               3'd5:                begin
                  from_tb_g_in1 = SobelFilter_Add2iLLu9_4_53_out1;
               end
               
               3'd6:                begin
                  from_tb_g_in1 = SobelFilter_gen000001_4_49_out1;
               end
               
               default:                begin
                  from_tb_g_in1 = {{1'b0, s_reg_37_slice[0]}, s_reg_38[8:0]};
               end
               
            endcase

         end

         // resource: mux_8bx3i1c
         always @(i_rgb_data[15:8] or from_tb_g_out1 or gs_ctrl1)
          begin :drive_from_tb_g_DIN
            case (gs_ctrl1) 

               2'd1:                begin
                  from_tb_g_DIN = from_tb_g_out1;
               end
               
               2'd2:                begin
                  from_tb_g_DIN = 8'd000;
               end
               
               default:                begin
                  from_tb_g_DIN = i_rgb_data[15:8];
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall0 or SobelFilter_LtiLLs11_4_42_out1 or SobelFilter_LtiLLs11_4_56_out1 or gs_ctrl6)
          begin :drive_from_tb_g_CE
            if (stall0) begin
               from_tb_g_CE = 1'b0;
            end
            else begin
               case (gs_ctrl6) 

                  2'd1:                   begin
                     from_tb_g_CE = 1'b1;
                  end
                  
                  2'd2:                   begin
                     if (SobelFilter_LtiLLs11_4_42_out1) begin
                        from_tb_g_CE = 1'b0;
                     end
                     else begin
                        from_tb_g_CE = 1'b1;
                     end
                  end
                  
                  2'd3:                   begin
                     if (SobelFilter_LtiLLs11_4_56_out1) begin
                        from_tb_g_CE = 1'b1;
                     end
                     else begin
                        from_tb_g_CE = 1'b0;
                     end
                  end
                  
                  default:                   begin
                     from_tb_g_CE = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or gs_ctrl3)
          begin :drive_from_tb_g_RW
            if (stall0) begin
               from_tb_g_RW = 1'b0;
            end
            else begin
               if (gs_ctrl3) begin
                  from_tb_g_RW = 1'b1;
               end
               else begin
                  from_tb_g_RW = 1'b0;
               end
            end
         end

         // resource: mux_11bx7i0c
         always @(s_reg_38[8:0] or SobelFilter_Add2iLLu9_4_18_out1 or SobelFilter_Add3u9u2Cati0u2_4_21_out1 or SobelFilter_gen000001_4_43_out1 or SobelFilter_Add2iLLu9_4_53_out1 or SobelFilter_gen000001_4_49_out1 or gs_ctrl8 or s_reg_37_slice[0])
          begin :drive_from_tb_b_in1
            case (gs_ctrl8) 

               3'd1:                begin
                  from_tb_b_in1 = SobelFilter_Add2iLLu9_4_18_out1;
               end
               
               3'd2:                begin
                  from_tb_b_in1 = SobelFilter_Add3u9u2Cati0u2_4_21_out1;
               end
               
               3'd3:                begin
                  from_tb_b_in1 = SobelFilter_gen000001_4_43_out1;
               end
               
               3'd4:                begin
                  from_tb_b_in1 = {2'b00, s_reg_38[8:0]};
               end
               
               3'd5:                begin
                  from_tb_b_in1 = SobelFilter_Add2iLLu9_4_53_out1;
               end
               
               3'd6:                begin
                  from_tb_b_in1 = SobelFilter_gen000001_4_49_out1;
               end
               
               default:                begin
                  from_tb_b_in1 = {{1'b0, s_reg_37_slice[0]}, s_reg_38[8:0]};
               end
               
            endcase

         end

         // resource: mux_8bx3i1c
         always @(i_rgb_data[23:16] or from_tb_b_out1 or gs_ctrl1)
          begin :drive_from_tb_b_DIN
            case (gs_ctrl1) 

               2'd1:                begin
                  from_tb_b_DIN = from_tb_b_out1;
               end
               
               2'd2:                begin
                  from_tb_b_DIN = 8'd000;
               end
               
               default:                begin
                  from_tb_b_DIN = i_rgb_data[23:16];
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall0 or SobelFilter_LtiLLs11_4_42_out1 or SobelFilter_LtiLLs11_4_56_out1 or gs_ctrl10)
          begin :drive_from_tb_b_CE
            if (stall0) begin
               from_tb_b_CE = 1'b0;
            end
            else begin
               case (gs_ctrl10) 

                  2'd1:                   begin
                     from_tb_b_CE = 1'b1;
                  end
                  
                  2'd2:                   begin
                     if (SobelFilter_LtiLLs11_4_42_out1) begin
                        from_tb_b_CE = 1'b0;
                     end
                     else begin
                        from_tb_b_CE = 1'b1;
                     end
                  end
                  
                  2'd3:                   begin
                     if (SobelFilter_LtiLLs11_4_56_out1) begin
                        from_tb_b_CE = 1'b1;
                     end
                     else begin
                        from_tb_b_CE = 1'b0;
                     end
                  end
                  
                  default:                   begin
                     from_tb_b_CE = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or gs_ctrl3)
          begin :drive_from_tb_b_RW
            if (stall0) begin
               from_tb_b_RW = 1'b0;
            end
            else begin
               if (gs_ctrl3) begin
                  from_tb_b_RW = 1'b1;
               end
               else begin
                  from_tb_b_RW = 1'b0;
               end
            end
         end

         // resource: SobelFilter_Lti2s3_4  instance: SobelFilter_Lti2s3_4_15
         assign SobelFilter_Lti2s3_4_15_out1 = s_reg_39[2] ^ s_reg_39 < 3'd2;

         // resource: SobelFilter_Add2iLLu9_4  instance: SobelFilter_Add2iLLu9_4_18
         assign SobelFilter_Add2iLLu9_4_18_out1 = {2'b00, s_reg_38[8:0]} + 11'd1024;

         // resource: SobelFilter_LtiLLs11_4  instance: SobelFilter_LtiLLs11_4_20
         assign SobelFilter_LtiLLs11_4_20_out1 = s_reg_38[10] ^ s_reg_38 < 11'd0512;

         // resource: mux_2bx3i1c
         always @(s_reg_39[1:0] or SobelFilter_Lti3u2_4_34_out1 or gs_ctrl12 or s_reg_37_slice)
          begin :drive_SobelFilter_Add3u9u2Cati0u2_4_21_in3
            case (gs_ctrl12) 

               2'd1:                begin
                  SobelFilter_Add3u9u2Cati0u2_4_21_in3 = s_reg_37_slice;
               end
               
               2'd2:                begin
                  if (SobelFilter_Lti3u2_4_34_out1) begin
                     SobelFilter_Add3u9u2Cati0u2_4_21_in3 = s_reg_37_slice;
                  end
                  else begin
                     SobelFilter_Add3u9u2Cati0u2_4_21_in3 = s_reg_39[1:0];
                  end
               end
               
               default:                begin
                  SobelFilter_Add3u9u2Cati0u2_4_21_in3 = 2'd0;
               end
               
            endcase

         end

         // resource: mux_2bx2i1c
         always @(s_reg_40 or SobelFilter_Lti3u2_4_34_out1 or gs_ctrl12)
          begin :drive_SobelFilter_Add3u9u2Cati0u2_4_21_in2
            case (gs_ctrl12) 

               2'd1:                begin
                  SobelFilter_Add3u9u2Cati0u2_4_21_in2 = s_reg_40;
               end
               
               2'd2:                begin
                  if (SobelFilter_Lti3u2_4_34_out1) begin
                     SobelFilter_Add3u9u2Cati0u2_4_21_in2 = s_reg_40;
                  end
                  else begin
                     SobelFilter_Add3u9u2Cati0u2_4_21_in2 = 2'd0;
                  end
               end
               
               default:                begin
                  SobelFilter_Add3u9u2Cati0u2_4_21_in2 = 2'd0;
               end
               
            endcase

         end

         // resource: mux_9bx3i1c
         always @(s_reg_38[8:0] or s_reg_43[8:0] or gs_ctrl14)
          begin :drive_SobelFilter_Add3u9u2Cati0u2_4_21_in1
            case (gs_ctrl14) 

               2'd1:                begin
                  SobelFilter_Add3u9u2Cati0u2_4_21_in1 = s_reg_38[8:0];
               end
               
               2'd2:                begin
                  SobelFilter_Add3u9u2Cati0u2_4_21_in1 = s_reg_43[8:0];
               end
               
               default:                begin
                  SobelFilter_Add3u9u2Cati0u2_4_21_in1 = 9'd000;
               end
               
            endcase

         end

         // resource: SobelFilter_Add3u9u2Cati0u2_4  instance: SobelFilter_Add3u9u2Cati0u2_4_21
         assign SobelFilter_Add3u9u2Cati0u2_4_21_out1 = {SobelFilter_Add3u9u2Cati0u2_4_21_in3, 9'd000} + ({9'b000000000, SobelFilter_Add3u9u2Cati0u2_4_21_in2} + {2'b00, SobelFilter_Add3u9u2Cati0u2_4_21_in1});

         // resource: mux_2bx3i1c
         always @(s_reg_39[1:0] or SobelFilter_Lti3u2_4_34_out1 or gs_ctrl15 or s_reg_37_slice)
          begin :drive_SobelFilter_Add2u2Mul2i3u2_4_22_in2
            if (gs_ctrl15) begin
               if (SobelFilter_Lti3u2_4_34_out1) begin
                  SobelFilter_Add2u2Mul2i3u2_4_22_in2 = s_reg_37_slice;
               end
               else begin
                  SobelFilter_Add2u2Mul2i3u2_4_22_in2 = s_reg_39[1:0];
               end
            end
            else begin
               SobelFilter_Add2u2Mul2i3u2_4_22_in2 = 2'd0;
            end
         end

         // resource: mux_2bx2i1c
         always @(s_reg_40 or SobelFilter_Lti3u2_4_34_out1 or gs_ctrl15)
          begin :drive_SobelFilter_Add2u2Mul2i3u2_4_22_in1
            if (gs_ctrl15) begin
               if (SobelFilter_Lti3u2_4_34_out1) begin
                  SobelFilter_Add2u2Mul2i3u2_4_22_in1 = s_reg_40;
               end
               else begin
                  SobelFilter_Add2u2Mul2i3u2_4_22_in1 = 2'd0;
               end
            end
            else begin
               SobelFilter_Add2u2Mul2i3u2_4_22_in1 = 2'd0;
            end
         end

         // resource: SobelFilter_Add2u2Mul2i3u2_4  instance: SobelFilter_Add2u2Mul2i3u2_4_22
         assign SobelFilter_Add2u2Mul2i3u2_4_22_out1 = {2'b00, SobelFilter_Add2u2Mul2i3u2_4_22_in2}*4'd03 + {2'b00, SobelFilter_Add2u2Mul2i3u2_4_22_in1};

         // instance: drive_filter2_in1
         assign filter2_in1 = SobelFilter_Add2u2Mul2i3u2_4_22_out1;

         // resource: SobelFilter_Add2i1u2_4  instance: SobelFilter_Add2i1u2_4_25
         assign SobelFilter_Add2i1u2_4_25_out1 = s_reg_37_slice + 2'd1;

         // resource: SobelFilter_Add2i1u2_4  instance: SobelFilter_Add2i1u2_4_26
         assign SobelFilter_Add2i1u2_4_26_out1 = s_reg_40 + 2'd1;

         // resource: mux_8bx2i0c
         always @(s_reg_45 or from_tb_b_out1 or gs_ctrl17)
          begin :drive_SobelFilter_R18_3Add3Mul2i144u8Mul2iLLu8Mul2i299u8_4_28_in1
            if (gs_ctrl17) begin
               SobelFilter_R18_3Add3Mul2i144u8Mul2iLLu8Mul2i299u8_4_28_in1 = s_reg_45;
            end
            else begin
               SobelFilter_R18_3Add3Mul2i144u8Mul2iLLu8Mul2i299u8_4_28_in1 = from_tb_b_out1;
            end
         end

         // resource: SobelFilter_R18_3Add3Mul2i144u8Mul2iLLu8Mul2i299u8_4  instance: SobelFilter_R18_3Add3Mul2i144u8Mul2iLLu8Mul2i299u8_4_28
         assign bits_001 = {11'b00000000000, s_reg_41}*19'd000299 + {11'b00000000000, s_reg_44}*19'd000587 + {11'b00000000000, SobelFilter_R18_3Add3Mul2i144u8Mul2iLLu8Mul2i299u8_4_28_in1}*19'd000144;

         // resource: SobelFilter_R18_3Add3Mul2i144u8Mul2iLLu8Mul2i299u8_4  instance: SobelFilter_R18_3Add3Mul2i144u8Mul2iLLu8Mul2i299u8_4_28
         assign SobelFilter_R18_3Add3Mul2i144u8Mul2iLLu8Mul2i299u8_4_28_out1 = bits_001[18:3];

         // resource: SobelFilter_Div_8U_27_4  instance: SobelFilter_Div_8U_27_4_29
         assign SobelFilter_Div_8U_27_4_29_out1 = SobelFilter_R18_3Add3Mul2i144u8Mul2iLLu8Mul2i299u8_4_28_out1 / 7'd125;

         // resource: mux_8bx3i0c
         always @(o_result_b_data or o_result_g_data or o_result_r_data or gs_ctrl18)
          begin :drive_SobelFilter_Add2Mul2s8u8s8_4_30_in3
            case (gs_ctrl18) 

               2'd1:                begin
                  SobelFilter_Add2Mul2s8u8s8_4_30_in3 = o_result_g_data;
               end
               
               2'd2:                begin
                  SobelFilter_Add2Mul2s8u8s8_4_30_in3 = o_result_b_data;
               end
               
               default:                begin
                  SobelFilter_Add2Mul2s8u8s8_4_30_in3 = o_result_r_data;
               end
               
            endcase

         end

         // resource: SobelFilter_Add2Mul2s8u8s8_4  instance: SobelFilter_Add2Mul2s8u8s8_4_30
         assign SobelFilter_Add2Mul2s8u8s8_4_30_out1 = SobelFilter_Add2Mul2s8u8s8_4_30_in3 + SobelFilter_Div_8U_27_4_29_out1*s_reg_42;

         // resource: SobelFilter_Lti3u2_4  instance: SobelFilter_Lti3u2_4_34
         assign SobelFilter_Lti3u2_4_34_out1 = s_reg_40 < 2'd3;

         // resource: SobelFilter_Lti3u2_4  instance: SobelFilter_Lti3u2_4_38
         assign SobelFilter_Lti3u2_4_38_out1 = s_reg_39[1:0] < 2'd3;

         // resource: SobelFilter_Add2n128s8_4  instance: SobelFilter_Add2n128s8_4_39
         assign SobelFilter_Add2n128s8_4_39_out1 = o_result_r_data + 8'd128;

         // resource: SobelFilter_Add2n128s8_4  instance: SobelFilter_Add2n128s8_4_40
         assign SobelFilter_Add2n128s8_4_40_out1 = o_result_g_data + 8'd128;

         // resource: SobelFilter_Add2n128s8_4  instance: SobelFilter_Add2n128s8_4_41
         assign SobelFilter_Add2n128s8_4_41_out1 = o_result_b_data + 8'd128;

         // resource: SobelFilter_LtiLLs11_4  instance: SobelFilter_LtiLLs11_4_42
         assign SobelFilter_LtiLLs11_4_42_out1 = s_reg_43[10] ^ s_reg_43 < 11'd0512;

         // resource: mux_9bx2i1c
         always @(s_reg_38[8:0] or gs_ctrl19)
          begin :drive_SobelFilter_gen000001_4_43_in1
            if (gs_ctrl19) begin
               SobelFilter_gen000001_4_43_in1 = s_reg_38[8:0];
            end
            else begin
               SobelFilter_gen000001_4_43_in1 = 9'd000;
            end
         end

         // resource: SobelFilter_gen000001_4  instance: SobelFilter_gen000001_4_43
         assign SobelFilter_gen000001_4_43_out1 = {2'b00, SobelFilter_gen000001_4_43_in1} + 11'd0512;

         // resource: SobelFilter_Add2iLLu9_4  instance: SobelFilter_Add2iLLu9_4_53
         assign SobelFilter_Add2iLLu9_4_53_out1 = {2'b00, s_reg_38[8:0]} + 11'd1024;

         // resource: SobelFilter_gen000001_4  instance: SobelFilter_gen000001_4_49
         assign SobelFilter_gen000001_4_49_out1 = {2'b00, s_reg_38[8:0]} + 11'd0512;

         // resource: SobelFilter_LtiLLs11_4  instance: SobelFilter_LtiLLs11_4_56
         assign SobelFilter_LtiLLs11_4_56_out1 = s_reg_38[10] ^ s_reg_38 < 11'd0512;

         // resource: regr_en_sc_5
         always @(posedge i_clk)
          begin :drive_global_state
            if (i_rst == 1'b0) begin
               global_state <= 5'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     global_state <= global_state_next;
                  end
                  
               endcase

            end
         end

         // resource: mux_5bx5i4c
         always @(SobelFilter_LtiLLs11_4_14_out1 or SobelFilter_Lti2s3_4_15_out1 or SobelFilter_LtiLLs11_4_20_out1 or SobelFilter_Lti3u2_4_34_out1 or SobelFilter_Lti3u2_4_38_out1 or SobelFilter_LtiLLs11_4_42_out1 or SobelFilter_LtiLLs11_4_56_out1 or global_state)
          begin :drive_global_state_next
            case (global_state) 

               5'd02:                begin
                  if (SobelFilter_LtiLLs11_4_14_out1) begin
                     global_state_next = 5'd01;
                  end
                  else begin
                     if (SobelFilter_Lti2s3_4_15_out1) begin
                        global_state_next = 5'd01;
                     end
                     else begin
                        global_state_next = global_state + 5'd01;
                     end
                  end
               end
               
               5'd04:                begin
                  if (SobelFilter_LtiLLs11_4_20_out1) begin
                     global_state_next = 5'd03;
                  end
                  else begin
                     global_state_next = global_state + 5'd01;
                  end
               end
               
               5'd09:                begin
                  if (SobelFilter_Lti3u2_4_34_out1) begin
                     global_state_next = 5'd05;
                  end
                  else begin
                     if (SobelFilter_Lti3u2_4_38_out1) begin
                        global_state_next = 5'd05;
                     end
                     else begin
                        global_state_next = global_state + 5'd01;
                     end
                  end
               end
               
               5'd15:                begin
                  if (SobelFilter_LtiLLs11_4_42_out1) begin
                     global_state_next = 5'd05;
                  end
                  else begin
                     global_state_next = global_state + 5'd01;
                  end
               end
               
               5'd20:                begin
                  if (SobelFilter_LtiLLs11_4_56_out1) begin
                     global_state_next = 5'd16;
                  end
                  else begin
                     global_state_next = 5'd03;
                  end
               end
               
               default:                begin
                  global_state_next = global_state + 5'd01;
               end
               
            endcase

         end

         // resource: mux_3bx8i8c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl0
            if (i_rst == 1'b0) begin
               gs_ctrl0 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd03:                         begin
                           gs_ctrl0 <= 3'd1;
                        end
                        
                        5'd04, 5'd09:                         begin
                           gs_ctrl0 <= 3'd2;
                        end
                        
                        5'd15:                         begin
                           gs_ctrl0 <= 3'd3;
                        end
                        
                        5'd16:                         begin
                           gs_ctrl0 <= 3'd4;
                        end
                        
                        5'd17, 5'd19:                         begin
                           gs_ctrl0 <= 3'd5;
                        end
                        
                        5'd18:                         begin
                           gs_ctrl0 <= 3'd6;
                        end
                        
                        5'd20:                         begin
                           gs_ctrl0 <= 3'd7;
                        end
                        
                        default:                         begin
                           gs_ctrl0 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl1
            if (i_rst == 1'b0) begin
               gs_ctrl1 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd16, 5'd18:                         begin
                           gs_ctrl1 <= 2'd1;
                        end
                        
                        5'd19:                         begin
                           gs_ctrl1 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl1 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl2
            if (i_rst == 1'b0) begin
               gs_ctrl2 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd01, 5'd03, 5'd15, 5'd16, 5'd17, 5'd18, 5'd19:                         begin
                           gs_ctrl2 <= 3'd1;
                        end
                        
                        5'd04:                         begin
                           gs_ctrl2 <= 3'd2;
                        end
                        
                        5'd09:                         begin
                           gs_ctrl2 <= 3'd3;
                        end
                        
                        5'd20:                         begin
                           gs_ctrl2 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl2 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl3
            if (i_rst == 1'b0) begin
               gs_ctrl3 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd01, 5'd03, 5'd16, 5'd18, 5'd19:                         begin
                           gs_ctrl3 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl3 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx7i7c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl4
            if (i_rst == 1'b0) begin
               gs_ctrl4 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd03:                         begin
                           gs_ctrl4 <= 3'd1;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl4 <= 3'd2;
                        end
                        
                        5'd15, 5'd20:                         begin
                           gs_ctrl4 <= 3'd3;
                        end
                        
                        5'd16:                         begin
                           gs_ctrl4 <= 3'd4;
                        end
                        
                        5'd17, 5'd19:                         begin
                           gs_ctrl4 <= 3'd5;
                        end
                        
                        5'd18:                         begin
                           gs_ctrl4 <= 3'd6;
                        end
                        
                        default:                         begin
                           gs_ctrl4 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i4c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl6
            if (i_rst == 1'b0) begin
               gs_ctrl6 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd01, 5'd03, 5'd05, 5'd16, 5'd17, 5'd18, 5'd19:                         begin
                           gs_ctrl6 <= 2'd1;
                        end
                        
                        5'd15:                         begin
                           gs_ctrl6 <= 2'd2;
                        end
                        
                        5'd20:                         begin
                           gs_ctrl6 <= 2'd3;
                        end
                        
                        default:                         begin
                           gs_ctrl6 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx7i7c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl8
            if (i_rst == 1'b0) begin
               gs_ctrl8 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd03:                         begin
                           gs_ctrl8 <= 3'd1;
                        end
                        
                        5'd06:                         begin
                           gs_ctrl8 <= 3'd2;
                        end
                        
                        5'd15, 5'd20:                         begin
                           gs_ctrl8 <= 3'd3;
                        end
                        
                        5'd16:                         begin
                           gs_ctrl8 <= 3'd4;
                        end
                        
                        5'd17, 5'd19:                         begin
                           gs_ctrl8 <= 3'd5;
                        end
                        
                        5'd18:                         begin
                           gs_ctrl8 <= 3'd6;
                        end
                        
                        default:                         begin
                           gs_ctrl8 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i4c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl10
            if (i_rst == 1'b0) begin
               gs_ctrl10 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd01, 5'd03, 5'd06, 5'd16, 5'd17, 5'd18, 5'd19:                         begin
                           gs_ctrl10 <= 2'd1;
                        end
                        
                        5'd15:                         begin
                           gs_ctrl10 <= 2'd2;
                        end
                        
                        5'd20:                         begin
                           gs_ctrl10 <= 2'd3;
                        end
                        
                        default:                         begin
                           gs_ctrl10 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl12
            if (i_rst == 1'b0) begin
               gs_ctrl12 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd05, 5'd06:                         begin
                           gs_ctrl12 <= 2'd1;
                        end
                        
                        5'd09:                         begin
                           gs_ctrl12 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl12 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl14
            if (i_rst == 1'b0) begin
               gs_ctrl14 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd05, 5'd06, 5'd09:                         begin
                           gs_ctrl14 <= 2'd1;
                        end
                        
                        5'd15:                         begin
                           gs_ctrl14 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl14 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl15
            if (i_rst == 1'b0) begin
               gs_ctrl15 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd09:                         begin
                           gs_ctrl15 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl15 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl17
            if (i_rst == 1'b0) begin
               gs_ctrl17 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd08, 5'd09:                         begin
                           gs_ctrl17 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl17 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl18
            if (i_rst == 1'b0) begin
               gs_ctrl18 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd08:                         begin
                           gs_ctrl18 <= 2'd1;
                        end
                        
                        5'd09:                         begin
                           gs_ctrl18 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl18 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl19
            if (i_rst == 1'b0) begin
               gs_ctrl19 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd20:                         begin
                           gs_ctrl19 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl19 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // instance: drive_i_rgb_busy
         assign i_rgb_busy = SobelFilter_gen_busy_r_4_61_out1[2];

         // resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_61
         assign SobelFilter_gen_busy_r_4_61_out1 = {SobelFilter_gen_busy_r_4_61_gnew_req, {SobelFilter_gen_busy_r_4_61_gdiv, SobelFilter_gen_busy_r_4_61_gen_busy_i_rgb_m_data_is_invalid_next}};

         // resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_61
         assign SobelFilter_gen_busy_r_4_61_gen_busy_i_rgb_m_data_is_invalid_next = ~SobelFilter_gen_busy_r_4_61_gdiv;

         // resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_61
         assign SobelFilter_gen_busy_r_4_61_gdiv = i_rgb_vld & !SobelFilter_gen_busy_r_4_61_gnew_req;

         // resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_61
         assign SobelFilter_gen_busy_r_4_61_gnew_req = i_rgb_m_busy_req_0 & (i_rgb_m_unvalidated_req | i_rgb_vld);

         // resource: regr_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_m_unvalidated_req
            if (i_rst == 1'b0) begin
               i_rgb_m_unvalidated_req <= 1'd1;
            end
            else begin
               i_rgb_m_unvalidated_req <= SobelFilter_N_Muxb_1_2_23_4_10_out1;
            end
         end

         // resource: SobelFilter_N_Muxb_1_2_23_4
         always @(i_rgb_vld or i_rgb_m_busy_req_0 or i_rgb_m_unvalidated_req)
          begin :SobelFilter_N_Muxb_1_2_23_4_10
            if (i_rgb_m_busy_req_0) begin
               SobelFilter_N_Muxb_1_2_23_4_10_out1 = i_rgb_m_unvalidated_req;
            end
            else begin
               SobelFilter_N_Muxb_1_2_23_4_10_out1 = i_rgb_vld;
            end
         end

         // instance: drive_o_result_r_vld
         assign o_result_r_vld = SobelFilter_Or_1Ux1U_1U_4_2_out1;

         // resource: SobelFilter_Or_1Ux1U_1U_4  instance: SobelFilter_Or_1Ux1U_1U_4_2
         assign SobelFilter_Or_1Ux1U_1U_4_2_out1 = o_result_r_m_unacked_req | SobelFilter_Xor_1Ux1U_1U_1_1_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_r_m_unacked_req
            if (i_rst == 1'b0) begin
               o_result_r_m_unacked_req <= 1'd0;
            end
            else begin
               o_result_r_m_unacked_req <= SobelFilter_And_1Ux1U_1U_4_57_out1;
            end
         end

         // resource: SobelFilter_And_1Ux1U_1U_4  instance: SobelFilter_And_1Ux1U_1U_4_57
         assign SobelFilter_And_1Ux1U_1U_4_57_out1 = o_result_r_busy & o_result_r_vld;

         // resource: SobelFilter_Xor_1Ux1U_1U_1  instance: SobelFilter_Xor_1Ux1U_1U_1_1
         assign SobelFilter_Xor_1Ux1U_1U_1_1_out1 = o_result_r_m_req_m_trig_req ^ o_result_r_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_r_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_result_r_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_result_r_m_req_m_prev_trig_req <= o_result_r_m_req_m_trig_req;
            end
         end

         // resource: SobelFilter_Not_1U_1U_1  instance: SobelFilter_Not_1U_1U_1_3
         assign SobelFilter_Not_1U_1U_1_3_out1 = !o_result_r_m_req_m_trig_req;

         // instance: drive_o_result_g_vld
         assign o_result_g_vld = SobelFilter_Or_1Ux1U_1U_4_5_out1;

         // resource: SobelFilter_Or_1Ux1U_1U_4  instance: SobelFilter_Or_1Ux1U_1U_4_5
         assign SobelFilter_Or_1Ux1U_1U_4_5_out1 = o_result_g_m_unacked_req | SobelFilter_Xor_1Ux1U_1U_1_4_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_g_m_unacked_req
            if (i_rst == 1'b0) begin
               o_result_g_m_unacked_req <= 1'd0;
            end
            else begin
               o_result_g_m_unacked_req <= SobelFilter_And_1Ux1U_1U_4_58_out1;
            end
         end

         // resource: SobelFilter_And_1Ux1U_1U_4  instance: SobelFilter_And_1Ux1U_1U_4_58
         assign SobelFilter_And_1Ux1U_1U_4_58_out1 = o_result_g_busy & o_result_g_vld;

         // resource: SobelFilter_Xor_1Ux1U_1U_1  instance: SobelFilter_Xor_1Ux1U_1U_1_4
         assign SobelFilter_Xor_1Ux1U_1U_1_4_out1 = o_result_g_m_req_m_trig_req ^ o_result_g_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_g_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_result_g_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_result_g_m_req_m_prev_trig_req <= o_result_g_m_req_m_trig_req;
            end
         end

         // resource: SobelFilter_Not_1U_1U_1  instance: SobelFilter_Not_1U_1U_1_6
         assign SobelFilter_Not_1U_1U_1_6_out1 = !o_result_g_m_req_m_trig_req;

         // instance: drive_o_result_b_vld
         assign o_result_b_vld = SobelFilter_Or_1Ux1U_1U_4_8_out1;

         // resource: SobelFilter_Or_1Ux1U_1U_4  instance: SobelFilter_Or_1Ux1U_1U_4_8
         assign SobelFilter_Or_1Ux1U_1U_4_8_out1 = o_result_b_m_unacked_req | SobelFilter_Xor_1Ux1U_1U_1_7_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_b_m_unacked_req
            if (i_rst == 1'b0) begin
               o_result_b_m_unacked_req <= 1'd0;
            end
            else begin
               o_result_b_m_unacked_req <= SobelFilter_And_1Ux1U_1U_4_59_out1;
            end
         end

         // resource: SobelFilter_And_1Ux1U_1U_4  instance: SobelFilter_And_1Ux1U_1U_4_59
         assign SobelFilter_And_1Ux1U_1U_4_59_out1 = o_result_b_busy & o_result_b_vld;

         // resource: SobelFilter_Xor_1Ux1U_1U_1  instance: SobelFilter_Xor_1Ux1U_1U_1_7
         assign SobelFilter_Xor_1Ux1U_1U_1_7_out1 = o_result_b_m_req_m_trig_req ^ o_result_b_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_b_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_result_b_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_result_b_m_req_m_prev_trig_req <= o_result_b_m_req_m_trig_req;
            end
         end

         // resource: SobelFilter_Not_1U_1U_1  instance: SobelFilter_Not_1U_1U_1_9
         assign SobelFilter_Not_1U_1U_1_9_out1 = !o_result_b_m_req_m_trig_req;


endmodule

