// Generated by stratus_hls 19.12-s100  (91710.131054)
// Wed May  5 00:12:43 2021
// from ../SobelFilter.cpp

`timescale 1ps / 1ps

      
module SobelFilter(i_clk, i_rst, i_rgb_busy, i_rgb_vld, i_rgb_data, o_result_r_busy, o_result_r_vld, o_result_r_data, o_result_g_busy, o_result_g_vld, o_result_g_data, o_result_b_busy, o_result_b_vld, o_result_b_data);

      input i_clk;
      input i_rst;
      input i_rgb_vld;
      input [23:0] i_rgb_data;
      input o_result_r_busy;
      input o_result_g_busy;
      input o_result_b_busy;
      output i_rgb_busy;
      output o_result_r_vld;
      output [7:0] o_result_r_data;
      reg [7:0] o_result_r_data;
      output o_result_g_vld;
      output [7:0] o_result_g_data;
      reg [7:0] o_result_g_data;
      output o_result_b_vld;
      output [7:0] o_result_b_data;
      reg [7:0] o_result_b_data;
      reg o_result_b_m_req_m_prev_trig_req;
      reg o_result_b_m_unacked_req;
      wire SobelFilter_Xor_1Ux1U_1U_1_7_out1;
      wire SobelFilter_Or_1Ux1U_1U_4_8_out1;
      reg o_result_g_m_req_m_prev_trig_req;
      reg o_result_g_m_unacked_req;
      wire SobelFilter_Xor_1Ux1U_1U_1_4_out1;
      wire SobelFilter_Or_1Ux1U_1U_4_5_out1;
      reg o_result_r_m_req_m_prev_trig_req;
      reg o_result_r_m_unacked_req;
      wire SobelFilter_Xor_1Ux1U_1U_1_1_out1;
      wire SobelFilter_Or_1Ux1U_1U_4_2_out1;
      reg SobelFilter_N_Muxb_1_2_3_4_10_out1;
      reg i_rgb_m_unvalidated_req;
      wire SobelFilter_gen_busy_r_4_80_gnew_req;
      wire SobelFilter_gen_busy_r_4_80_gdiv;
      wire SobelFilter_gen_busy_r_4_80_gen_busy_i_rgb_m_data_is_invalid_next;
      reg[5:0] global_state_next;
      reg[8:0] SobelFilter_Add_10Ux9U_11U_4_62_in1;
      reg gs_ctrl19;
      wire SobelFilter_LessThan_2Ux2U_1U_4_57_out1;
      reg[7:0] SobelFilter_Add_8Ux8U_8U_4_51_in1;
      reg[1:0] gs_ctrl18;
      wire[15:0] SobelFilter_Div_16Ux7U_8U_4_40_in2;
      reg[16:0] SobelFilter_Add_20Sx17U_20S_1_37_in1;
      reg[1:0] gs_ctrl17;
      /*signed*/reg[18:0] SobelFilter_Add_20Sx17U_20S_1_37_in2_slice;
      reg[1:0] gs_ctrl16;
      /*signed*/wire[4:0] SobelFilter_Add_5Sx2U_5S_4_34_out1;
      reg[7:0] SobelFilter_Mul_11Sx8U_19S_4_27_in1;
      reg[2:0] gs_ctrl15;
      /*signed*/reg[9:0] SobelFilter_Mul_11Sx8U_19S_4_27_in2_slice;
      reg[2:0] gs_ctrl14;
      /*signed*/wire[11:0] SobelFilter_Add_12Sx10U_12S_4_25_in2;
      wire SobelFilter_LessThan_3Sx3S_1U_4_15_out1;
      reg gs_ctrl13;
      reg gs_ctrl12;
      reg[2:0] gs_ctrl11;
      /*signed*/wire[11:0] SobelFilter_Add_12Sx10U_12S_4_31_out1;
      reg[2:0] gs_ctrl10;
      reg gs_ctrl9;
      reg gs_ctrl8;
      reg[2:0] gs_ctrl7;
      /*signed*/wire[11:0] SobelFilter_Add_12Sx10U_12S_4_26_out1;
      reg[2:0] gs_ctrl6;
      reg gs_ctrl5;
      reg[1:0] gs_ctrl4;
      reg[1:0] gs_ctrl3;
      /*signed*/wire[11:0] SobelFilter_Add_12Sx10U_12S_4_16_out1;
      /*signed*/wire[11:0] SobelFilter_Add_12Sx10U_12S_4_25_out1;
      wire[10:0] SobelFilter_Add_10Ux9U_11U_4_62_out1;
      reg[2:0] gs_ctrl2;
      reg[8:0] SobelFilter_Add_9Ux3S_11S_4_13_in2;
      reg gs_ctrl1;
      reg SobelFilter_Add_2Sx1U_3S_4_12_in1;
      reg gs_ctrl0;
      reg[7:0] s_reg_93;
      /*signed*/wire[19:0] SobelFilter_Add_20Sx17U_20S_1_37_out1;
      /*signed*/reg[18:0] s_reg_92_slice;
      reg[23:0] s_reg_91;
      reg[7:0] s_reg_90;
      reg[16:0] s_reg_89;
      wire[1:0] SobelFilter_Add_2Ux1U_2U_4_30_out1;
      reg[9:0] s_reg_87;
      /*signed*/wire[18:0] SobelFilter_Mul_11Sx8U_19S_4_27_out1;
      reg[16:0] s_reg_86;
      wire[7:0] SobelFilter_Div_16Ux7U_8U_4_40_out1;
      reg[7:0] s_reg_85;
      wire[9:0] SobelFilter_Add_9Ux2U_10U_4_22_out1;
      reg[9:0] s_reg_84;
      wire[1:0] SobelFilter_Add_2Ux1U_2U_4_33_out1;
      reg[8:0] s_reg_82_slice;
      /*signed*/wire[10:0] SobelFilter_Add_9Ux3S_11S_4_13_out1;
      reg[10:0] s_reg_81;
      wire[3:0] SobelFilter_Mul_2Ux2U_4U_4_24_out1;
      /*signed*/wire[2:0] SobelFilter_Add_2Sx1U_3S_4_12_out1;
      reg[1:0] s_reg_88;
      wire SobelFilter_LessThan_2Ux2U_1U_4_56_out1;
      reg[3:0] s_reg_80;
      reg[1:0] s_reg_83;
      reg[1:0] s_reg_79_slice;
      wire SobelFilter_And_1Ux1U_1U_4_76_out1;
      wire SobelFilter_And_1Ux1U_1U_4_77_out1;
      wire SobelFilter_And_1Ux1U_1U_4_78_out1;
      wire[2:0] SobelFilter_gen_busy_r_4_80_out1;
      wire SobelFilter_Not_1U_1U_1_9_out1;
      reg o_result_b_m_req_m_trig_req;
      wire SobelFilter_Not_1U_1U_1_6_out1;
      reg o_result_g_m_req_m_trig_req;
      wire SobelFilter_Not_1U_1U_1_3_out1;
      reg o_result_r_m_req_m_trig_req;
      wire SobelFilter_LessThan_11Sx11S_1U_4_14_out1;
      reg i_rgb_m_busy_req_0;
      wire[7:0] SobelFilter_Add_8Ux8U_8U_4_58_out1;
      wire[7:0] SobelFilter_Add_8Ux8U_8U_4_59_out1;
      wire[7:0] SobelFilter_Add_8Ux8U_8U_4_60_out1;
      wire[7:0] SobelFilter_Add_8Ux8U_8U_4_51_out1;
      wire SobelFilter_LessThan_11Sx11S_1U_4_20_out1;
      reg[5:0] global_state;
      reg stall0;
      wire[3:0] filter2_in1;
      wire[31:0] filter2_out1;
      reg[7:0] from_tb_b_DIN;
      reg from_tb_b_CE;
      reg from_tb_b_RW;
      reg[10:0] from_tb_b_in1;
      wire[7:0] from_tb_b_out1;
      reg[7:0] from_tb_g_DIN;
      reg from_tb_g_CE;
      reg from_tb_g_RW;
      reg[10:0] from_tb_g_in1;
      wire[7:0] from_tb_g_out1;
      reg[7:0] from_tb_r_DIN;
      reg from_tb_r_CE;
      reg from_tb_r_RW;
      reg[10:0] from_tb_r_in1;
      wire[7:0] from_tb_r_out1;

         SobelFilter_RAM_1536X8_1 from_tb_r(
                                    .DIN( from_tb_r_DIN ),
                                    .CE( from_tb_r_CE ),
                                    .RW( from_tb_r_RW ),
                                    .in1( from_tb_r_in1 ),
                                    .out1( from_tb_r_out1 ),
                                    .clk( i_clk )
                                  );

         SobelFilter_RAM_1536X8_1 from_tb_g(
                                    .DIN( from_tb_g_DIN ),
                                    .CE( from_tb_g_CE ),
                                    .RW( from_tb_g_RW ),
                                    .in1( from_tb_g_in1 ),
                                    .out1( from_tb_g_out1 ),
                                    .clk( i_clk )
                                  );

         SobelFilter_RAM_1536X8_1 from_tb_b(
                                    .DIN( from_tb_b_DIN ),
                                    .CE( from_tb_b_CE ),
                                    .RW( from_tb_b_RW ),
                                    .in1( from_tb_b_in1 ),
                                    .out1( from_tb_b_out1 ),
                                    .clk( i_clk )
                                  );

         SobelFilter_ROM_9X32_filter2 filter2(
                                        .in1( filter2_in1 ),
                                        .out1( filter2_out1 ),
                                        .clk( i_clk )
                                      );

         // resource: mux_8bx3i1c
         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_o_result_b_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd06:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                        end
                        else begin
                           o_result_b_data <= 8'd000;
                        end
                     end
                     
                     6'd22:                      begin
                        o_result_b_data <= SobelFilter_Add_8Ux8U_8U_4_51_out1;
                     end
                     
                     6'd27:                      begin
                        o_result_b_data <= SobelFilter_Add_8Ux8U_8U_4_60_out1;
                     end
                     
                     6'd29:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                           o_result_b_data <= 8'd000;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_8bx3i1c
         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_o_result_g_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd06:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                        end
                        else begin
                           o_result_g_data <= 8'd000;
                        end
                     end
                     
                     6'd21:                      begin
                        o_result_g_data <= SobelFilter_Add_8Ux8U_8U_4_51_out1;
                     end
                     
                     6'd26:                      begin
                        o_result_g_data <= SobelFilter_Add_8Ux8U_8U_4_59_out1;
                     end
                     
                     6'd29:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                           o_result_g_data <= 8'd000;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_8bx3i1c
         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_o_result_r_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd06:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                        end
                        else begin
                           o_result_r_data <= 8'd000;
                        end
                     end
                     
                     6'd20:                      begin
                        o_result_r_data <= SobelFilter_Add_8Ux8U_8U_4_51_out1;
                     end
                     
                     6'd25:                      begin
                        o_result_r_data <= SobelFilter_Add_8Ux8U_8U_4_58_out1;
                     end
                     
                     6'd29:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                           o_result_r_data <= 8'd000;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_m_busy_req_0
            if (i_rst == 1'b0) begin
               i_rgb_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        6'd00, 6'd02:                         begin
                           i_rgb_m_busy_req_0 <= 1'd0;
                        end
                        
                        6'd01, 6'd03:                         begin
                           i_rgb_m_busy_req_0 <= 1'd1;
                        end
                        
                        6'd06:                         begin
                           if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        6'd41:                         begin
                           if (SobelFilter_LessThan_11Sx11S_1U_4_14_out1) begin
                           end
                           else begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_r_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_result_r_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        6'd25:                         begin
                           o_result_r_m_req_m_trig_req <= SobelFilter_Not_1U_1U_1_3_out1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_g_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_result_g_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        6'd26:                         begin
                           o_result_g_m_req_m_trig_req <= SobelFilter_Not_1U_1U_1_6_out1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_b_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_result_b_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        6'd27:                         begin
                           o_result_b_m_req_m_trig_req <= SobelFilter_Not_1U_1U_1_9_out1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx5i1c
         always @(SobelFilter_And_1Ux1U_1U_4_76_out1 or SobelFilter_And_1Ux1U_1U_4_77_out1 or SobelFilter_And_1Ux1U_1U_4_78_out1 or SobelFilter_gen_busy_r_4_80_out1[0] or global_state)
          begin :drive_stall0
            case (global_state) 

               6'd01, 6'd03:                begin
                  stall0 = SobelFilter_gen_busy_r_4_80_out1[0];
               end
               
               6'd26:                begin
                  stall0 = SobelFilter_And_1Ux1U_1U_4_76_out1;
               end
               
               6'd27:                begin
                  stall0 = SobelFilter_And_1Ux1U_1U_4_77_out1;
               end
               
               6'd28:                begin
                  stall0 = SobelFilter_And_1Ux1U_1U_4_78_out1;
               end
               
               default:                begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: mux_2bx3i1c
         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_79_slice
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd00, 6'd06, 6'd29:                      begin
                        s_reg_79_slice <= 2'd0;
                     end
                     
                     6'd02:                      begin
                        if (s_reg_83[0]) begin
                        end
                        else begin
                           s_reg_79_slice <= s_reg_80[1:0];
                        end
                     end
                     
                     6'd23:                      begin
                        if (SobelFilter_LessThan_2Ux2U_1U_4_56_out1) begin
                        end
                        else begin
                           s_reg_79_slice <= s_reg_88;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_4bx3i0c
         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_80
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd00:                      begin
                        s_reg_80 <= {SobelFilter_Add_2Sx1U_3S_4_12_out1[2], SobelFilter_Add_2Sx1U_3S_4_12_out1};
                     end
                     
                     6'd02:                      begin
                        if (s_reg_83[0]) begin
                           s_reg_80 <= {s_reg_80[2], s_reg_80[2:0]};
                        end
                        else begin
                           s_reg_80 <= {SobelFilter_Add_2Sx1U_3S_4_12_out1[2], SobelFilter_Add_2Sx1U_3S_4_12_out1};
                        end
                     end
                     
                     6'd09:                      begin
                        s_reg_80 <= SobelFilter_Mul_2Ux2U_4U_4_24_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_11bx2i1c
         // resource: regr_en_11
         always @(posedge i_clk)
          begin :drive_s_reg_81
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd00:                      begin
                        s_reg_81 <= 11'd0000;
                     end
                     
                     6'd01, 6'd05:                      begin
                        s_reg_81 <= SobelFilter_Add_9Ux3S_11S_4_13_out1;
                     end
                     
                     6'd02:                      begin
                        if (s_reg_83[0]) begin
                        end
                        else begin
                           s_reg_81 <= 11'd0000;
                        end
                     end
                     
                     6'd06:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                        end
                        else begin
                           s_reg_81 <= SobelFilter_Add_9Ux3S_11S_4_13_out1;
                        end
                     end
                     
                     6'd29:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                           s_reg_81 <= SobelFilter_Add_9Ux3S_11S_4_13_out1;
                        end
                        else begin
                           s_reg_81 <= 11'd0000;
                        end
                     end
                     
                     6'd41:                      begin
                        if (SobelFilter_LessThan_11Sx11S_1U_4_14_out1) begin
                           /* state56 */
                           s_reg_81 <= SobelFilter_Add_9Ux3S_11S_4_13_out1;
                        end
                        else begin
                           s_reg_81 <= 11'd0000;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_9bx2i1c
         // resource: regr_en_9
         always @(posedge i_clk)
          begin :drive_s_reg_82_slice
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd06:                      begin
                        s_reg_82_slice <= 9'd000;
                     end
                     
                     6'd29:                      begin
                        s_reg_82_slice <= s_reg_81[8:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx3i1c
         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_83
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd01:                      begin
                        s_reg_83 <= {1'b0, SobelFilter_LessThan_11Sx11S_1U_4_14_out1};
                     end
                     
                     6'd06, 6'd29:                      begin
                        s_reg_83 <= 2'd0;
                     end
                     
                     6'd13:                      begin
                        s_reg_83 <= SobelFilter_Add_2Ux1U_2U_4_33_out1;
                     end
                     
                     6'd23:                      begin
                        if (SobelFilter_LessThan_2Ux2U_1U_4_56_out1) begin
                        end
                        else begin
                           s_reg_83 <= 2'd0;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_10bx2i0c
         // resource: regr_en_10
         always @(posedge i_clk)
          begin :drive_s_reg_84
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd08, 6'd11:                      begin
                        s_reg_84 <= SobelFilter_Add_9Ux2U_10U_4_22_out1;
                     end
                     
                     6'd14:                      begin
                        s_reg_84 <= {{ 2 {filter2_out1[7]}}, filter2_out1[7:0]};
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_8bx2i0c
         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_85
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd10, 6'd33:                      begin
                        s_reg_85 <= from_tb_r_out1;
                     end
                     
                     6'd17:                      begin
                        s_reg_85 <= SobelFilter_Div_16Ux7U_8U_4_40_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_17
         always @(posedge i_clk)
          begin :drive_s_reg_86
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd10, 6'd14, 6'd15:                      begin
                        s_reg_86 <= SobelFilter_Mul_11Sx8U_19S_4_27_out1[16:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_10bx2i0c
         // resource: regr_en_10
         always @(posedge i_clk)
          begin :drive_s_reg_87
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd07:                      begin
                        s_reg_87 <= SobelFilter_Add_9Ux2U_10U_4_22_out1;
                     end
                     
                     6'd11, 6'd34:                      begin
                        s_reg_87 <= {2'b00, from_tb_g_out1};
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_88
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd12:                      begin
                        s_reg_88 <= SobelFilter_Add_2Ux1U_2U_4_30_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_17
         always @(posedge i_clk)
          begin :drive_s_reg_89
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd12, 6'd16, 6'd18:                      begin
                        s_reg_89 <= SobelFilter_Mul_11Sx8U_19S_4_27_out1[16:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_8bx2i0c
         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_90
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd13, 6'd35:                      begin
                        s_reg_90 <= from_tb_b_out1;
                     end
                     
                     6'd19:                      begin
                        s_reg_90 <= SobelFilter_Div_16Ux7U_8U_4_40_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_24bx2i0c
         // resource: regr_en_24
         always @(posedge i_clk)
          begin :drive_s_reg_91
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd03:                      begin
                        s_reg_91 <= i_rgb_data;
                     end
                     
                     6'd13, 6'd17:                      begin
                        s_reg_91 <= {{ 5 {SobelFilter_Mul_11Sx8U_19S_4_27_out1[18]}}, SobelFilter_Mul_11Sx8U_19S_4_27_out1};
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_19bx2i0c
         // resource: regr_en_19
         always @(posedge i_clk)
          begin :drive_s_reg_92_slice
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd11:                      begin
                        s_reg_92_slice <= SobelFilter_Mul_11Sx8U_19S_4_27_out1;
                     end
                     
                     6'd14, 6'd16, 6'd18:                      begin
                        s_reg_92_slice <= SobelFilter_Add_20Sx17U_20S_1_37_out1[18:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_93
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd15:                      begin
                        s_reg_93 <= SobelFilter_Div_16Ux7U_8U_4_40_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_1bx2i1c
         always @(s_reg_80[0] or gs_ctrl0)
          begin :drive_SobelFilter_Add_2Sx1U_3S_4_12_in1
            if (gs_ctrl0) begin
               SobelFilter_Add_2Sx1U_3S_4_12_in1 = s_reg_80[0];
            end
            else begin
               SobelFilter_Add_2Sx1U_3S_4_12_in1 = 1'b0;
            end
         end

         // resource: SobelFilter_Add_2Sx1U_3S_4  instance: SobelFilter_Add_2Sx1U_3S_4_12
         assign SobelFilter_Add_2Sx1U_3S_4_12_out1 = {2'b00, SobelFilter_Add_2Sx1U_3S_4_12_in1} + 3'd1;

         // resource: mux_9bx2i1c
         always @(s_reg_81[8:0] or gs_ctrl1)
          begin :drive_SobelFilter_Add_9Ux3S_11S_4_13_in2
            if (gs_ctrl1) begin
               SobelFilter_Add_9Ux3S_11S_4_13_in2 = 9'd000;
            end
            else begin
               SobelFilter_Add_9Ux3S_11S_4_13_in2 = s_reg_81[8:0];
            end
         end

         // resource: SobelFilter_Add_9Ux3S_11S_4  instance: SobelFilter_Add_9Ux3S_11S_4_13
         assign SobelFilter_Add_9Ux3S_11S_4_13_out1 = {2'b00, SobelFilter_Add_9Ux3S_11S_4_13_in2} + 11'd0001;

         // resource: SobelFilter_LessThan_11Sx11S_1U_4  instance: SobelFilter_LessThan_11Sx11S_1U_4_14
         assign SobelFilter_LessThan_11Sx11S_1U_4_14_out1 = SobelFilter_Add_9Ux3S_11S_4_13_out1[10] ^ SobelFilter_Add_9Ux3S_11S_4_13_out1 < 11'd0512;

         // resource: mux_11bx5i0c
         always @(s_reg_81[8:0] or SobelFilter_Add_12Sx10U_12S_4_16_out1[10:0] or SobelFilter_Add_12Sx10U_12S_4_25_out1[10:0] or SobelFilter_Add_10Ux9U_11U_4_62_out1 or gs_ctrl2 or s_reg_79_slice[0])
          begin :drive_from_tb_r_in1
            case (gs_ctrl2) 

               3'd1:                begin
                  from_tb_r_in1 = SobelFilter_Add_12Sx10U_12S_4_16_out1[10:0];
               end
               
               3'd2:                begin
                  from_tb_r_in1 = SobelFilter_Add_12Sx10U_12S_4_25_out1[10:0];
               end
               
               3'd3:                begin
                  from_tb_r_in1 = SobelFilter_Add_10Ux9U_11U_4_62_out1;
               end
               
               3'd4:                begin
                  from_tb_r_in1 = {2'b00, s_reg_81[8:0]};
               end
               
               default:                begin
                  from_tb_r_in1 = {{1'b0, s_reg_79_slice[0]}, s_reg_81[8:0]};
               end
               
            endcase

         end

         // resource: mux_8bx4i1c
         always @(i_rgb_data[7:0] or s_reg_85 or from_tb_r_out1 or gs_ctrl3)
          begin :drive_from_tb_r_DIN
            case (gs_ctrl3) 

               2'd1:                begin
                  from_tb_r_DIN = from_tb_r_out1;
               end
               
               2'd2:                begin
                  from_tb_r_DIN = s_reg_85;
               end
               
               2'd3:                begin
                  from_tb_r_DIN = 8'd000;
               end
               
               default:                begin
                  from_tb_r_DIN = i_rgb_data[7:0];
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall0 or SobelFilter_LessThan_11Sx11S_1U_4_20_out1 or gs_ctrl4)
          begin :drive_from_tb_r_CE
            if (stall0) begin
               from_tb_r_CE = 1'b0;
            end
            else begin
               case (gs_ctrl4) 

                  2'd1:                   begin
                     from_tb_r_CE = 1'b1;
                  end
                  
                  2'd2:                   begin
                     if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                        from_tb_r_CE = 1'b0;
                     end
                     else begin
                        from_tb_r_CE = 1'b1;
                     end
                  end
                  
                  default:                   begin
                     from_tb_r_CE = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or gs_ctrl5)
          begin :drive_from_tb_r_RW
            if (stall0) begin
               from_tb_r_RW = 1'b0;
            end
            else begin
               if (gs_ctrl5) begin
                  from_tb_r_RW = 1'b1;
               end
               else begin
                  from_tb_r_RW = 1'b0;
               end
            end
         end

         // resource: mux_11bx5i0c
         always @(s_reg_81[8:0] or SobelFilter_Add_12Sx10U_12S_4_16_out1[10:0] or SobelFilter_Add_12Sx10U_12S_4_26_out1[10:0] or SobelFilter_Add_10Ux9U_11U_4_62_out1 or gs_ctrl6 or s_reg_79_slice[0])
          begin :drive_from_tb_g_in1
            case (gs_ctrl6) 

               3'd1:                begin
                  from_tb_g_in1 = SobelFilter_Add_12Sx10U_12S_4_16_out1[10:0];
               end
               
               3'd2:                begin
                  from_tb_g_in1 = SobelFilter_Add_12Sx10U_12S_4_26_out1[10:0];
               end
               
               3'd3:                begin
                  from_tb_g_in1 = SobelFilter_Add_10Ux9U_11U_4_62_out1;
               end
               
               3'd4:                begin
                  from_tb_g_in1 = {2'b00, s_reg_81[8:0]};
               end
               
               default:                begin
                  from_tb_g_in1 = {{1'b0, s_reg_79_slice[0]}, s_reg_81[8:0]};
               end
               
            endcase

         end

         // resource: mux_8bx5i1c
         always @(i_rgb_data[15:8] or s_reg_87[7:0] or s_reg_91[15:8] or from_tb_g_out1 or gs_ctrl7)
          begin :drive_from_tb_g_DIN
            case (gs_ctrl7) 

               3'd1:                begin
                  from_tb_g_DIN = s_reg_91[15:8];
               end
               
               3'd2:                begin
                  from_tb_g_DIN = from_tb_g_out1;
               end
               
               3'd3:                begin
                  from_tb_g_DIN = s_reg_87[7:0];
               end
               
               3'd4:                begin
                  from_tb_g_DIN = 8'd000;
               end
               
               default:                begin
                  from_tb_g_DIN = i_rgb_data[15:8];
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall0 or gs_ctrl8)
          begin :drive_from_tb_g_CE
            if (stall0) begin
               from_tb_g_CE = 1'b0;
            end
            else begin
               if (gs_ctrl8) begin
                  from_tb_g_CE = 1'b1;
               end
               else begin
                  from_tb_g_CE = 1'b0;
               end
            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or gs_ctrl9)
          begin :drive_from_tb_g_RW
            if (stall0) begin
               from_tb_g_RW = 1'b0;
            end
            else begin
               if (gs_ctrl9) begin
                  from_tb_g_RW = 1'b1;
               end
               else begin
                  from_tb_g_RW = 1'b0;
               end
            end
         end

         // resource: mux_11bx5i0c
         always @(s_reg_81[8:0] or SobelFilter_Add_12Sx10U_12S_4_16_out1[10:0] or SobelFilter_Add_12Sx10U_12S_4_31_out1[10:0] or SobelFilter_Add_10Ux9U_11U_4_62_out1 or gs_ctrl10 or s_reg_79_slice[0])
          begin :drive_from_tb_b_in1
            case (gs_ctrl10) 

               3'd1:                begin
                  from_tb_b_in1 = SobelFilter_Add_12Sx10U_12S_4_16_out1[10:0];
               end
               
               3'd2:                begin
                  from_tb_b_in1 = SobelFilter_Add_12Sx10U_12S_4_31_out1[10:0];
               end
               
               3'd3:                begin
                  from_tb_b_in1 = SobelFilter_Add_10Ux9U_11U_4_62_out1;
               end
               
               3'd4:                begin
                  from_tb_b_in1 = {2'b00, s_reg_81[8:0]};
               end
               
               default:                begin
                  from_tb_b_in1 = {{1'b0, s_reg_79_slice[0]}, s_reg_81[8:0]};
               end
               
            endcase

         end

         // resource: mux_8bx5i1c
         always @(i_rgb_data[23:16] or s_reg_90 or s_reg_91[23:16] or from_tb_b_out1 or gs_ctrl11)
          begin :drive_from_tb_b_DIN
            case (gs_ctrl11) 

               3'd1:                begin
                  from_tb_b_DIN = s_reg_91[23:16];
               end
               
               3'd2:                begin
                  from_tb_b_DIN = from_tb_b_out1;
               end
               
               3'd3:                begin
                  from_tb_b_DIN = s_reg_90;
               end
               
               3'd4:                begin
                  from_tb_b_DIN = 8'd000;
               end
               
               default:                begin
                  from_tb_b_DIN = i_rgb_data[23:16];
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall0 or gs_ctrl12)
          begin :drive_from_tb_b_CE
            if (stall0) begin
               from_tb_b_CE = 1'b0;
            end
            else begin
               if (gs_ctrl12) begin
                  from_tb_b_CE = 1'b1;
               end
               else begin
                  from_tb_b_CE = 1'b0;
               end
            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or gs_ctrl13)
          begin :drive_from_tb_b_RW
            if (stall0) begin
               from_tb_b_RW = 1'b0;
            end
            else begin
               if (gs_ctrl13) begin
                  from_tb_b_RW = 1'b1;
               end
               else begin
                  from_tb_b_RW = 1'b0;
               end
            end
         end

         // resource: SobelFilter_LessThan_3Sx3S_1U_4  instance: SobelFilter_LessThan_3Sx3S_1U_4_15
         assign SobelFilter_LessThan_3Sx3S_1U_4_15_out1 = s_reg_80[2] ^ s_reg_80[2:0] < 3'd2;

         // resource: SobelFilter_Add_12Sx10U_12S_4  instance: SobelFilter_Add_12Sx10U_12S_4_16
         assign SobelFilter_Add_12Sx10U_12S_4_16_out1 = {{2'b00, 1'b0}, s_reg_81[8:0]} + 12'd1024;

         // resource: SobelFilter_LessThan_11Sx11S_1U_4  instance: SobelFilter_LessThan_11Sx11S_1U_4_20
         assign SobelFilter_LessThan_11Sx11S_1U_4_20_out1 = s_reg_81[10] ^ s_reg_81 < 11'd0512;

         // resource: SobelFilter_Add_9Ux2U_10U_4  instance: SobelFilter_Add_9Ux2U_10U_4_22
         assign SobelFilter_Add_9Ux2U_10U_4_22_out1 = {1'b0, s_reg_82_slice} + {8'b00000000, s_reg_83};

         // resource: SobelFilter_Mul_2Ux2U_4U_4  instance: SobelFilter_Mul_2Ux2U_4U_4_24
         assign SobelFilter_Mul_2Ux2U_4U_4_24_out1 = {2'b00, s_reg_79_slice}*4'd03;

         // instance: drive_SobelFilter_Add_12Sx10U_12S_4_25_in2
         assign SobelFilter_Add_12Sx10U_12S_4_25_in2 = {{1'b0, s_reg_79_slice}, 9'd000};

         // resource: SobelFilter_Add_12Sx10U_12S_4  instance: SobelFilter_Add_12Sx10U_12S_4_25
         assign SobelFilter_Add_12Sx10U_12S_4_25_out1 = SobelFilter_Add_12Sx10U_12S_4_25_in2 + {2'b00, s_reg_87};

         // resource: SobelFilter_Add_12Sx10U_12S_4  instance: SobelFilter_Add_12Sx10U_12S_4_26
         assign SobelFilter_Add_12Sx10U_12S_4_26_out1 = SobelFilter_Add_12Sx10U_12S_4_25_in2 + {2'b00, s_reg_84};

         // resource: mux_10bx5i2c
         always @(s_reg_85 or s_reg_90 or s_reg_93 or gs_ctrl14)
          begin :drive_SobelFilter_Mul_11Sx8U_19S_4_27_in2_slice
            case (gs_ctrl14) 

               3'd1:                begin
                  SobelFilter_Mul_11Sx8U_19S_4_27_in2_slice = 10'd0587;
               end
               
               3'd2:                begin
                  SobelFilter_Mul_11Sx8U_19S_4_27_in2_slice = {2'b00, s_reg_90};
               end
               
               3'd3:                begin
                  SobelFilter_Mul_11Sx8U_19S_4_27_in2_slice = {2'b00, s_reg_93};
               end
               
               3'd4:                begin
                  SobelFilter_Mul_11Sx8U_19S_4_27_in2_slice = {2'b00, s_reg_85};
               end
               
               default:                begin
                  SobelFilter_Mul_11Sx8U_19S_4_27_in2_slice = 10'd0299;
               end
               
            endcase

         end

         // resource: mux_8bx6i1c
         always @(s_reg_84[7:0] or s_reg_85 or s_reg_87[7:0] or from_tb_r_out1 or from_tb_g_out1 or gs_ctrl15)
          begin :drive_SobelFilter_Mul_11Sx8U_19S_4_27_in1
            case (gs_ctrl15) 

               3'd1:                begin
                  SobelFilter_Mul_11Sx8U_19S_4_27_in1 = from_tb_g_out1;
               end
               
               3'd2:                begin
                  SobelFilter_Mul_11Sx8U_19S_4_27_in1 = s_reg_85;
               end
               
               3'd3:                begin
                  SobelFilter_Mul_11Sx8U_19S_4_27_in1 = s_reg_87[7:0];
               end
               
               3'd4:                begin
                  SobelFilter_Mul_11Sx8U_19S_4_27_in1 = 8'd144;
               end
               
               3'd5:                begin
                  SobelFilter_Mul_11Sx8U_19S_4_27_in1 = s_reg_84[7:0];
               end
               
               default:                begin
                  SobelFilter_Mul_11Sx8U_19S_4_27_in1 = from_tb_r_out1;
               end
               
            endcase

         end

         // resource: SobelFilter_Mul_11Sx8U_19S_4  instance: SobelFilter_Mul_11Sx8U_19S_4_27
         assign SobelFilter_Mul_11Sx8U_19S_4_27_out1 = {9'd000, SobelFilter_Mul_11Sx8U_19S_4_27_in2_slice}*{11'b00000000000, SobelFilter_Mul_11Sx8U_19S_4_27_in1};

         // resource: SobelFilter_Add_2Ux1U_2U_4  instance: SobelFilter_Add_2Ux1U_2U_4_30
         assign SobelFilter_Add_2Ux1U_2U_4_30_out1 = s_reg_79_slice + 2'd1;

         // resource: SobelFilter_Add_12Sx10U_12S_4  instance: SobelFilter_Add_12Sx10U_12S_4_31
         assign SobelFilter_Add_12Sx10U_12S_4_31_out1 = SobelFilter_Add_12Sx10U_12S_4_25_in2 + {2'b00, s_reg_84};

         // resource: SobelFilter_Add_2Ux1U_2U_4  instance: SobelFilter_Add_2Ux1U_2U_4_33
         assign SobelFilter_Add_2Ux1U_2U_4_33_out1 = s_reg_83 + 2'd1;

         // resource: SobelFilter_Add_5Sx2U_5S_4  instance: SobelFilter_Add_5Sx2U_5S_4_34
         assign SobelFilter_Add_5Sx2U_5S_4_34_out1 = {1'b0, s_reg_80} + {3'b000, s_reg_83};

         // resource: mux_19bx3i0c
         always @(s_reg_91[17:0] or gs_ctrl16 or s_reg_92_slice)
          begin :drive_SobelFilter_Add_20Sx17U_20S_1_37_in2_slice
            case (gs_ctrl16) 

               2'd1:                begin
                  SobelFilter_Add_20Sx17U_20S_1_37_in2_slice = s_reg_92_slice;
               end
               
               2'd2:                begin
                  SobelFilter_Add_20Sx17U_20S_1_37_in2_slice = {1'b0, s_reg_91[17:0]};
               end
               
               default:                begin
                  SobelFilter_Add_20Sx17U_20S_1_37_in2_slice = {1'b0, s_reg_92_slice[17:0]};
               end
               
            endcase

         end

         // resource: mux_17bx4i0c
         always @(s_reg_86 or s_reg_89 or gs_ctrl17)
          begin :drive_SobelFilter_Add_20Sx17U_20S_1_37_in1
            case (gs_ctrl17) 

               2'd1:                begin
                  SobelFilter_Add_20Sx17U_20S_1_37_in1 = {1'b0, s_reg_86[15:0]};
               end
               
               2'd2:                begin
                  SobelFilter_Add_20Sx17U_20S_1_37_in1 = s_reg_89;
               end
               
               2'd3:                begin
                  SobelFilter_Add_20Sx17U_20S_1_37_in1 = {1'b0, s_reg_89[15:0]};
               end
               
               default:                begin
                  SobelFilter_Add_20Sx17U_20S_1_37_in1 = s_reg_86;
               end
               
            endcase

         end

         // resource: SobelFilter_Add_20Sx17U_20S_1  instance: SobelFilter_Add_20Sx17U_20S_1_37
         assign SobelFilter_Add_20Sx17U_20S_1_37_out1 = {1'b0, SobelFilter_Add_20Sx17U_20S_1_37_in2_slice} + {3'b000, SobelFilter_Add_20Sx17U_20S_1_37_in1};

         // instance: drive_filter2_in1
         assign filter2_in1 = SobelFilter_Add_5Sx2U_5S_4_34_out1[3:0];

         // instance: drive_SobelFilter_Div_16Ux7U_8U_4_40_in2
         assign SobelFilter_Div_16Ux7U_8U_4_40_in2 = SobelFilter_Add_20Sx17U_20S_1_37_out1[18:3];

         // resource: SobelFilter_Div_16Ux7U_8U_4  instance: SobelFilter_Div_16Ux7U_8U_4_40
         assign SobelFilter_Div_16Ux7U_8U_4_40_out1 = SobelFilter_Div_16Ux7U_8U_4_40_in2 / 7'd125;

         // resource: mux_8bx3i0c
         always @(o_result_b_data or o_result_g_data or o_result_r_data or gs_ctrl18)
          begin :drive_SobelFilter_Add_8Ux8U_8U_4_51_in1
            case (gs_ctrl18) 

               2'd1:                begin
                  SobelFilter_Add_8Ux8U_8U_4_51_in1 = o_result_g_data;
               end
               
               2'd2:                begin
                  SobelFilter_Add_8Ux8U_8U_4_51_in1 = o_result_b_data;
               end
               
               default:                begin
                  SobelFilter_Add_8Ux8U_8U_4_51_in1 = o_result_r_data;
               end
               
            endcase

         end

         // resource: SobelFilter_Add_8Ux8U_8U_4  instance: SobelFilter_Add_8Ux8U_8U_4_51
         assign SobelFilter_Add_8Ux8U_8U_4_51_out1 = SobelFilter_Mul_11Sx8U_19S_4_27_out1[7:0] + SobelFilter_Add_8Ux8U_8U_4_51_in1;

         // resource: SobelFilter_LessThan_2Ux2U_1U_4  instance: SobelFilter_LessThan_2Ux2U_1U_4_56
         assign SobelFilter_LessThan_2Ux2U_1U_4_56_out1 = s_reg_83 < 2'd3;

         // resource: SobelFilter_LessThan_2Ux2U_1U_4  instance: SobelFilter_LessThan_2Ux2U_1U_4_57
         assign SobelFilter_LessThan_2Ux2U_1U_4_57_out1 = s_reg_88 < 2'd3;

         // resource: SobelFilter_Add_8Ux8U_8U_4  instance: SobelFilter_Add_8Ux8U_8U_4_58
         assign SobelFilter_Add_8Ux8U_8U_4_58_out1 = o_result_r_data + 8'd128;

         // resource: SobelFilter_Add_8Ux8U_8U_4  instance: SobelFilter_Add_8Ux8U_8U_4_59
         assign SobelFilter_Add_8Ux8U_8U_4_59_out1 = o_result_g_data + 8'd128;

         // resource: SobelFilter_Add_8Ux8U_8U_4  instance: SobelFilter_Add_8Ux8U_8U_4_60
         assign SobelFilter_Add_8Ux8U_8U_4_60_out1 = o_result_b_data + 8'd128;

         // resource: mux_9bx2i1c
         always @(s_reg_81[8:0] or gs_ctrl19)
          begin :drive_SobelFilter_Add_10Ux9U_11U_4_62_in1
            if (gs_ctrl19) begin
               SobelFilter_Add_10Ux9U_11U_4_62_in1 = s_reg_81[8:0];
            end
            else begin
               SobelFilter_Add_10Ux9U_11U_4_62_in1 = 9'd000;
            end
         end

         // resource: SobelFilter_Add_10Ux9U_11U_4  instance: SobelFilter_Add_10Ux9U_11U_4_62
         assign SobelFilter_Add_10Ux9U_11U_4_62_out1 = {2'b00, SobelFilter_Add_10Ux9U_11U_4_62_in1} + 11'd0512;

         // resource: regr_en_sc_6
         always @(posedge i_clk)
          begin :drive_global_state
            if (i_rst == 1'b0) begin
               global_state <= 6'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     global_state <= global_state_next;
                  end
                  
               endcase

            end
         end

         // resource: mux_6bx5i4c
         always @(s_reg_83[0] or SobelFilter_LessThan_11Sx11S_1U_4_14_out1 or SobelFilter_LessThan_3Sx3S_1U_4_15_out1 or SobelFilter_LessThan_11Sx11S_1U_4_20_out1 or SobelFilter_LessThan_2Ux2U_1U_4_56_out1 or SobelFilter_LessThan_2Ux2U_1U_4_57_out1 or global_state)
          begin :drive_global_state_next
            case (global_state) 

               6'd02:                begin
                  if (s_reg_83[0]) begin
                     global_state_next = 6'd01;
                  end
                  else begin
                     if (SobelFilter_LessThan_3Sx3S_1U_4_15_out1) begin
                        global_state_next = 6'd01;
                     end
                     else begin
                        global_state_next = global_state + 6'd01;
                     end
                  end
               end
               
               6'd06:                begin
                  if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                     global_state_next = 6'd03;
                  end
                  else begin
                     global_state_next = global_state + 6'd01;
                  end
               end
               
               6'd23:                begin
                  if (SobelFilter_LessThan_2Ux2U_1U_4_56_out1) begin
                     global_state_next = 6'd07;
                  end
                  else begin
                     if (SobelFilter_LessThan_2Ux2U_1U_4_57_out1) begin
                        global_state_next = 6'd07;
                     end
                     else begin
                        global_state_next = global_state + 6'd01;
                     end
                  end
               end
               
               6'd29:                begin
                  if (SobelFilter_LessThan_11Sx11S_1U_4_20_out1) begin
                     global_state_next = 6'd07;
                  end
                  else begin
                     global_state_next = global_state + 6'd01;
                  end
               end
               
               6'd41:                begin
                  if (SobelFilter_LessThan_11Sx11S_1U_4_14_out1) begin
                     global_state_next = global_state + 6'd01;
                  end
                  else begin
                     global_state_next = 6'd03;
                  end
               end
               
               6'd42:                begin
                  global_state_next = 6'd30;
               end
               
               default:                begin
                  global_state_next = global_state + 6'd01;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl0
            if (i_rst == 1'b0) begin
               gs_ctrl0 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd02:                         begin
                           gs_ctrl0 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl0 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl1
            if (i_rst == 1'b0) begin
               gs_ctrl1 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd06:                         begin
                           gs_ctrl1 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl1 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl2
            if (i_rst == 1'b0) begin
               gs_ctrl2 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd03, 6'd32, 6'd39:                         begin
                           gs_ctrl2 <= 3'd1;
                        end
                        
                        6'd09:                         begin
                           gs_ctrl2 <= 3'd2;
                        end
                        
                        6'd29, 6'd35, 6'd42:                         begin
                           gs_ctrl2 <= 3'd3;
                        end
                        
                        6'd30:                         begin
                           gs_ctrl2 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl2 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i4c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl3
            if (i_rst == 1'b0) begin
               gs_ctrl3 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd30:                         begin
                           gs_ctrl3 <= 2'd1;
                        end
                        
                        6'd35:                         begin
                           gs_ctrl3 <= 2'd2;
                        end
                        
                        6'd39:                         begin
                           gs_ctrl3 <= 2'd3;
                        end
                        
                        default:                         begin
                           gs_ctrl3 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl4
            if (i_rst == 1'b0) begin
               gs_ctrl4 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd01, 6'd03, 6'd09, 6'd30, 6'd32, 6'd35, 6'd39, 6'd42:                         begin
                           gs_ctrl4 <= 2'd1;
                        end
                        
                        6'd29:                         begin
                           gs_ctrl4 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl4 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl5
            if (i_rst == 1'b0) begin
               gs_ctrl5 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd01, 6'd03, 6'd30, 6'd35, 6'd39:                         begin
                           gs_ctrl5 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl5 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl6
            if (i_rst == 1'b0) begin
               gs_ctrl6 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd04, 6'd33, 6'd40:                         begin
                           gs_ctrl6 <= 3'd1;
                        end
                        
                        6'd10:                         begin
                           gs_ctrl6 <= 3'd2;
                        end
                        
                        6'd30, 6'd36:                         begin
                           gs_ctrl6 <= 3'd3;
                        end
                        
                        6'd31:                         begin
                           gs_ctrl6 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl6 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl7
            if (i_rst == 1'b0) begin
               gs_ctrl7 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd04:                         begin
                           gs_ctrl7 <= 3'd1;
                        end
                        
                        6'd31:                         begin
                           gs_ctrl7 <= 3'd2;
                        end
                        
                        6'd36:                         begin
                           gs_ctrl7 <= 3'd3;
                        end
                        
                        6'd40:                         begin
                           gs_ctrl7 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl7 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl8
            if (i_rst == 1'b0) begin
               gs_ctrl8 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd01, 6'd04, 6'd10, 6'd30, 6'd31, 6'd33, 6'd36, 6'd40:                         begin
                           gs_ctrl8 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl8 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl9
            if (i_rst == 1'b0) begin
               gs_ctrl9 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd01, 6'd04, 6'd31, 6'd36, 6'd40:                         begin
                           gs_ctrl9 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl9 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl10
            if (i_rst == 1'b0) begin
               gs_ctrl10 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd05, 6'd34, 6'd38:                         begin
                           gs_ctrl10 <= 3'd1;
                        end
                        
                        6'd12:                         begin
                           gs_ctrl10 <= 3'd2;
                        end
                        
                        6'd31, 6'd37:                         begin
                           gs_ctrl10 <= 3'd3;
                        end
                        
                        6'd32:                         begin
                           gs_ctrl10 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl10 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl11
            if (i_rst == 1'b0) begin
               gs_ctrl11 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd05:                         begin
                           gs_ctrl11 <= 3'd1;
                        end
                        
                        6'd32:                         begin
                           gs_ctrl11 <= 3'd2;
                        end
                        
                        6'd37:                         begin
                           gs_ctrl11 <= 3'd3;
                        end
                        
                        6'd38:                         begin
                           gs_ctrl11 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl11 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl12
            if (i_rst == 1'b0) begin
               gs_ctrl12 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd01, 6'd05, 6'd12, 6'd31, 6'd32, 6'd34, 6'd37, 6'd38:                         begin
                           gs_ctrl12 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl12 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl13
            if (i_rst == 1'b0) begin
               gs_ctrl13 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd01, 6'd05, 6'd32, 6'd37, 6'd38:                         begin
                           gs_ctrl13 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl13 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl14
            if (i_rst == 1'b0) begin
               gs_ctrl14 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd11, 6'd13, 6'd17:                         begin
                           gs_ctrl14 <= 3'd1;
                        end
                        
                        6'd14, 6'd15, 6'd18, 6'd22:                         begin
                           gs_ctrl14 <= 3'd2;
                        end
                        
                        6'd20:                         begin
                           gs_ctrl14 <= 3'd3;
                        end
                        
                        6'd21:                         begin
                           gs_ctrl14 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl14 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx6i6c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl15
            if (i_rst == 1'b0) begin
               gs_ctrl15 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd11:                         begin
                           gs_ctrl15 <= 3'd1;
                        end
                        
                        6'd12, 6'd16:                         begin
                           gs_ctrl15 <= 3'd2;
                        end
                        
                        6'd13, 6'd17:                         begin
                           gs_ctrl15 <= 3'd3;
                        end
                        
                        6'd14, 6'd15, 6'd18:                         begin
                           gs_ctrl15 <= 3'd4;
                        end
                        
                        6'd20, 6'd21, 6'd22:                         begin
                           gs_ctrl15 <= 3'd5;
                        end
                        
                        default:                         begin
                           gs_ctrl15 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl16
            if (i_rst == 1'b0) begin
               gs_ctrl16 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd15, 6'd17, 6'd19:                         begin
                           gs_ctrl16 <= 2'd1;
                        end
                        
                        6'd16, 6'd18:                         begin
                           gs_ctrl16 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl16 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i4c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl17
            if (i_rst == 1'b0) begin
               gs_ctrl17 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd15, 6'd17:                         begin
                           gs_ctrl17 <= 2'd1;
                        end
                        
                        6'd16, 6'd18:                         begin
                           gs_ctrl17 <= 2'd2;
                        end
                        
                        6'd19:                         begin
                           gs_ctrl17 <= 2'd3;
                        end
                        
                        default:                         begin
                           gs_ctrl17 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl18
            if (i_rst == 1'b0) begin
               gs_ctrl18 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd21:                         begin
                           gs_ctrl18 <= 2'd1;
                        end
                        
                        6'd22:                         begin
                           gs_ctrl18 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl18 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl19
            if (i_rst == 1'b0) begin
               gs_ctrl19 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd30, 6'd31, 6'd35, 6'd36, 6'd37, 6'd42:                         begin
                           gs_ctrl19 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl19 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // instance: drive_i_rgb_busy
         assign i_rgb_busy = SobelFilter_gen_busy_r_4_80_out1[2];

         // resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_80
         assign SobelFilter_gen_busy_r_4_80_out1 = {SobelFilter_gen_busy_r_4_80_gnew_req, {SobelFilter_gen_busy_r_4_80_gdiv, SobelFilter_gen_busy_r_4_80_gen_busy_i_rgb_m_data_is_invalid_next}};

         // resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_80
         assign SobelFilter_gen_busy_r_4_80_gen_busy_i_rgb_m_data_is_invalid_next = ~SobelFilter_gen_busy_r_4_80_gdiv;

         // resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_80
         assign SobelFilter_gen_busy_r_4_80_gdiv = i_rgb_vld & !SobelFilter_gen_busy_r_4_80_gnew_req;

         // resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_80
         assign SobelFilter_gen_busy_r_4_80_gnew_req = i_rgb_m_busy_req_0 & (i_rgb_m_unvalidated_req | i_rgb_vld);

         // resource: regr_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_m_unvalidated_req
            if (i_rst == 1'b0) begin
               i_rgb_m_unvalidated_req <= 1'd1;
            end
            else begin
               i_rgb_m_unvalidated_req <= SobelFilter_N_Muxb_1_2_3_4_10_out1;
            end
         end

         // resource: SobelFilter_N_Muxb_1_2_3_4
         always @(i_rgb_vld or i_rgb_m_busy_req_0 or i_rgb_m_unvalidated_req)
          begin :SobelFilter_N_Muxb_1_2_3_4_10
            if (i_rgb_m_busy_req_0) begin
               SobelFilter_N_Muxb_1_2_3_4_10_out1 = i_rgb_m_unvalidated_req;
            end
            else begin
               SobelFilter_N_Muxb_1_2_3_4_10_out1 = i_rgb_vld;
            end
         end

         // instance: drive_o_result_r_vld
         assign o_result_r_vld = SobelFilter_Or_1Ux1U_1U_4_2_out1;

         // resource: SobelFilter_Or_1Ux1U_1U_4  instance: SobelFilter_Or_1Ux1U_1U_4_2
         assign SobelFilter_Or_1Ux1U_1U_4_2_out1 = o_result_r_m_unacked_req | SobelFilter_Xor_1Ux1U_1U_1_1_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_r_m_unacked_req
            if (i_rst == 1'b0) begin
               o_result_r_m_unacked_req <= 1'd0;
            end
            else begin
               o_result_r_m_unacked_req <= SobelFilter_And_1Ux1U_1U_4_76_out1;
            end
         end

         // resource: SobelFilter_And_1Ux1U_1U_4  instance: SobelFilter_And_1Ux1U_1U_4_76
         assign SobelFilter_And_1Ux1U_1U_4_76_out1 = o_result_r_busy & o_result_r_vld;

         // resource: SobelFilter_Xor_1Ux1U_1U_1  instance: SobelFilter_Xor_1Ux1U_1U_1_1
         assign SobelFilter_Xor_1Ux1U_1U_1_1_out1 = o_result_r_m_req_m_trig_req ^ o_result_r_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_r_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_result_r_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_result_r_m_req_m_prev_trig_req <= o_result_r_m_req_m_trig_req;
            end
         end

         // resource: SobelFilter_Not_1U_1U_1  instance: SobelFilter_Not_1U_1U_1_3
         assign SobelFilter_Not_1U_1U_1_3_out1 = !o_result_r_m_req_m_trig_req;

         // instance: drive_o_result_g_vld
         assign o_result_g_vld = SobelFilter_Or_1Ux1U_1U_4_5_out1;

         // resource: SobelFilter_Or_1Ux1U_1U_4  instance: SobelFilter_Or_1Ux1U_1U_4_5
         assign SobelFilter_Or_1Ux1U_1U_4_5_out1 = o_result_g_m_unacked_req | SobelFilter_Xor_1Ux1U_1U_1_4_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_g_m_unacked_req
            if (i_rst == 1'b0) begin
               o_result_g_m_unacked_req <= 1'd0;
            end
            else begin
               o_result_g_m_unacked_req <= SobelFilter_And_1Ux1U_1U_4_77_out1;
            end
         end

         // resource: SobelFilter_And_1Ux1U_1U_4  instance: SobelFilter_And_1Ux1U_1U_4_77
         assign SobelFilter_And_1Ux1U_1U_4_77_out1 = o_result_g_busy & o_result_g_vld;

         // resource: SobelFilter_Xor_1Ux1U_1U_1  instance: SobelFilter_Xor_1Ux1U_1U_1_4
         assign SobelFilter_Xor_1Ux1U_1U_1_4_out1 = o_result_g_m_req_m_trig_req ^ o_result_g_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_g_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_result_g_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_result_g_m_req_m_prev_trig_req <= o_result_g_m_req_m_trig_req;
            end
         end

         // resource: SobelFilter_Not_1U_1U_1  instance: SobelFilter_Not_1U_1U_1_6
         assign SobelFilter_Not_1U_1U_1_6_out1 = !o_result_g_m_req_m_trig_req;

         // instance: drive_o_result_b_vld
         assign o_result_b_vld = SobelFilter_Or_1Ux1U_1U_4_8_out1;

         // resource: SobelFilter_Or_1Ux1U_1U_4  instance: SobelFilter_Or_1Ux1U_1U_4_8
         assign SobelFilter_Or_1Ux1U_1U_4_8_out1 = o_result_b_m_unacked_req | SobelFilter_Xor_1Ux1U_1U_1_7_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_b_m_unacked_req
            if (i_rst == 1'b0) begin
               o_result_b_m_unacked_req <= 1'd0;
            end
            else begin
               o_result_b_m_unacked_req <= SobelFilter_And_1Ux1U_1U_4_78_out1;
            end
         end

         // resource: SobelFilter_And_1Ux1U_1U_4  instance: SobelFilter_And_1Ux1U_1U_4_78
         assign SobelFilter_And_1Ux1U_1U_4_78_out1 = o_result_b_busy & o_result_b_vld;

         // resource: SobelFilter_Xor_1Ux1U_1U_1  instance: SobelFilter_Xor_1Ux1U_1U_1_7
         assign SobelFilter_Xor_1Ux1U_1U_1_7_out1 = o_result_b_m_req_m_trig_req ^ o_result_b_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_b_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_result_b_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_result_b_m_req_m_prev_trig_req <= o_result_b_m_req_m_trig_req;
            end
         end

         // resource: SobelFilter_Not_1U_1U_1  instance: SobelFilter_Not_1U_1U_1_9
         assign SobelFilter_Not_1U_1U_1_9_out1 = !o_result_b_m_req_m_trig_req;


endmodule

